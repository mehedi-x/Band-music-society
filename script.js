// ЁЯМР ржнрж╛рж╖рж╛ ржХрзЛржб ржорзНржпрж╛ржкрж┐ржВ
const langCodeMap = {
  austria: 'de', belgium: 'nl', czech: 'cs', denmark: 'da', finland: 'fi',
  france: 'fr', germany: 'de', greece: 'el', italy: 'it', netherlands: 'nl',
  norway: 'no', poland: 'pl', portugal: 'pt', spain: 'es', sweden: 'sv',
  switzerland: 'de', russian: 'ru', turkey: 'tr', ukraine: 'uk', unitedkingdom: 'en'
};

// ЁЯМН ржЧрзНрж▓рзЛржмрж╛рж▓ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓
let currentLanguage = '';
let currentData = [];
let userFolders = JSON.parse(localStorage.getItem('speakeu_folders')) || {};
let showingFolderContent = false;

// ЁЯУ▒ DOM ржПрж▓рж┐ржорзЗржирзНржЯ
const languageSelect = document.getElementById('language-select');
const conversationArea = document.getElementById('conversation-area');
const modeToggle = document.getElementById('mode-toggle');
const sideMenu = document.getElementById('side-menu');

// ЁЯЪА ржЕрзНржпрж╛ржк ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи
document.addEventListener('DOMContentLoaded', () => {
  initializeApp();
  setupEventListeners();
  loadSavedSettings();
});

function initializeApp() {
  const savedLang = localStorage.getItem('selectedLanguage');
  if (savedLang && languageSelect.value !== savedLang) {
    languageSelect.value = savedLang;
    loadLanguage(savedLang);
  } else {
    showHomePage();
  }
}

function setupEventListeners() {
  // ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи
  languageSelect.addEventListener('change', (e) => {
    const lang = e.target.value;
    if (!lang) {
      showHomePage();
      localStorage.removeItem('selectedLanguage');
      return;
    }
    localStorage.setItem('selectedLanguage', lang);
    loadLanguage(lang);
  });

  // ржорзЛржб ржЯржЧрж▓
  modeToggle.addEventListener('click', toggleTheme);

  // ржорзЗржирзБ ржЯржЧрж▓
  document.getElementById('menu-toggle').addEventListener('click', () => {
    sideMenu.classList.add('active');
  });

  document.getElementById('close-menu').addEventListener('click', () => {
    sideMenu.classList.remove('active');
  });

  // ржмрж╛ржЗрж░рзЗ ржХрзНрж▓рж┐ржХ ржХрж░рж▓рзЗ ржорзЗржирзБ ржмржирзНржз
  document.addEventListener('click', (e) => {
    if (!sideMenu.contains(e.target) && !e.target.closest('#menu-toggle')) {
      sideMenu.classList.remove('active');
    }
  });
}

function loadSavedSettings() {
  const savedTheme = localStorage.getItem('theme');
  if (savedTheme === 'dark') {
    document.body.classList.add('dark-mode');
    modeToggle.textContent = 'ЁЯМЩ';
  }
}

// ЁЯОи ржерж┐ржо ржЯржЧрж▓
function toggleTheme() {
  document.body.classList.toggle('dark-mode');
  const isDark = document.body.classList.contains('dark-mode');
  modeToggle.textContent = isDark ? 'ЁЯМЩ' : 'тШАя╕П';
  localStorage.setItem('theme', isDark ? 'dark' : 'light');
}

// ЁЯПа рж╣рзЛржо ржкрзЗржЗржЬ ржжрзЗржЦрж╛ржирзЛ
function showHomePage() {
  showingFolderContent = false;
  hideError();
  
  const homepageContent = document.getElementById('homepage-content');
  if (homepageContent) {
    homepageContent.style.display = 'block';
  }
  
  // ржЕржирзНржп ржХржирзНржЯрзЗржирзНржЯ рж▓рзБржХрж╛ржирзЛ
  const otherElements = conversationArea.querySelectorAll('.conversation-item, .favorites-header, .folders-container');
  otherElements.forEach(el => el.remove());
}

// ЁЯЧгя╕П ржнрж╛рж╖рж╛ рж▓рзЛржб ржХрж░рж╛
function loadLanguage(lang) {
  currentLanguage = lang;
  showLoadingState();
  
  fetch(`languages/${lang}.json`)
    .then(res => {
      if (!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);
      return res.json();
    })
    .then(data => {
      if (!Array.isArray(data) || data.length === 0) {
        throw new Error('ржбрзЗржЯрж╛ ржлрж░ржорзНржпрж╛ржЯ рж╕ржарж┐ржХ ржиржпрж╝ ржмрж╛ ржЦрж╛рж▓рж┐');
      }
      currentData = data;
      hideHomePage();
      renderVocabulary(data, langCodeMap[lang]);
    })
    .catch(error => {
      showError(`ржнрж╛рж╖рж╛рж░ ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: ${error.message}`);
    });
}

function showLoadingState() {
  hideHomePage();
  conversationArea.innerHTML = `
    <div style="text-align: center; padding: 50px;">
      <div style="font-size: 3rem; margin-bottom: 20px;">тП│</div>
      <h3>ржбрзЗржЯрж╛ рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...</h3>
    </div>
  `;
}

// ЁЯУЪ рж╢ржмрзНржжржнрж╛ржирзНржбрж╛рж░ рж░рзЗржирзНржбрж╛рж░ ржХрж░рж╛
function renderVocabulary(list, langKey) {
  hideError();
  hideHomePage();
  
  if (!Array.isArray(list) || list.length === 0) {
    showError('ржПржЗ ржнрж╛рж╖рж╛рж░ ржЬржирзНржп ржХрзЛржирзЛ ржбрзЗржЯрж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред');
    return;
  }

  // ржлрзЛрж▓рзНржбрж╛рж░ ржХржирзНржЯрзНрж░рзЛрж▓ рж╣рзЗржбрж╛рж░
  conversationArea.innerHTML = `
    <div class="favorites-header">
      <h3>ЁЯУЪ ${showingFolderContent ? 'ржлрзЛрж▓рзНржбрж╛рж░ ржХржирзНржЯрзЗржирзНржЯ' : 'рж╕ржм ржХржерзЛржкржХржержи'}</h3>
      <div class="favorites-buttons">
        <button class="control-btn ${!showingFolderContent ? 'active' : ''}" onclick="showAllItems()">рж╕ржм ржжрзЗржЦрзБржи</button>
        <button class="control-btn ${showingFolderContent ? 'active' : ''}" onclick="showFolderView()">ЁЯУБ ржлрзЛрж▓рзНржбрж╛рж░</button>
        <button class="control-btn" onclick="exportAllFolders()">ЁЯУд ржПржХрзНрж╕ржкрзЛрж░рзНржЯ</button>
        <button class="control-btn" onclick="importFolders()">ЁЯУе ржЗржоржкрзЛрж░рзНржЯ</button>
      </div>
    </div>
  `;

  // ржХржерзЛржкржХржержи ржЖржЗржЯрзЗржо ржпрзЛржЧ ржХрж░рж╛
  list.forEach((item, index) => {
    const div = document.createElement('div');
    div.className = 'conversation-item';
    div.innerHTML = `
      <button class="save-folder-btn" 
              onclick="showSaveToFolderDialog('${langKey}', ${index})"
              title="ржлрзЛрж▓рзНржбрж╛рж░рзЗ рж╕рзЗржн ржХрж░рзБржи">ЁЯТ╛</button>
      
      <div>ЁЯЧгя╕П <strong>${item[langKey] || 'тАФ'}</strong></div>
      <div>ЁЯУЭ <span>${item.bn || 'тАФ'}</span></div>
      <div>ЁЯУШ <em>${item.bnMeaning || 'тАФ'}</em></div>
      <div>ЁЯФд <span>${item.en || 'тАФ'}</span></div>
    `;
    conversationArea.appendChild(div);
  });
}

// ЁЯТ╛ ржлрзЛрж▓рзНржбрж╛рж░рзЗ рж╕рзЗржн ржХрж░рж╛рж░ ржбрж╛ржпрж╝рж╛рж▓ржЧ
function showSaveToFolderDialog(language, index) {
  const folderIds = Object.keys(userFolders);
  
  const dialogHtml = `
    <div class="folder-dialog-overlay" onclick="closeFolderDialog()">
      <div class="folder-dialog" onclick="event.stopPropagation()">
        <h3>ЁЯТ╛ ржлрзЛрж▓рзНржбрж╛рж░рзЗ рж╕рзЗржн ржХрж░рзБржи</h3>
        
        <div class="new-folder-section">
          <h4>ЁЯЖХ ржирждрзБржи ржлрзЛрж▓рзНржбрж╛рж░</h4>
          <input type="text" id="new-folder-name" placeholder="ржлрзЛрж▓рзНржбрж╛рж░рзЗрж░ ржирж╛ржо..." maxlength="50">
          <button onclick="createNewFolder('${language}', ${index})" class="create-folder-btn">рждрзИрж░рж┐ ржХрж░рзБржи</button>
        </div>
        
        ${folderIds.length > 0 ? `
          <div class="existing-folders-section">
            <h4>ЁЯУВ ржмрж┐ржжрзНржпржорж╛ржи ржлрзЛрж▓рзНржбрж╛рж░</h4>
            ${folderIds.map(folderId => `
              <div class="folder-option" onclick="saveToExistingFolder('${folderId}', '${language}', ${index})">
                <span>ЁЯУВ</span>
                <span>${userFolders[folderId].name}</span>
                <span>(${userFolders[folderId].items.length})</span>
              </div>
            `).join('')}
          </div>
        ` : ''}
        
        <button onclick="closeFolderDialog()" style="margin-top: 20px; padding: 10px 20px; border-radius: 5px; border: 1px solid #ddd; background: #f8f9fa; cursor: pointer;">ржмрж╛рждрж┐рж▓</button>
      </div>
    </div>
  `;
  
  document.body.insertAdjacentHTML('beforeend', dialogHtml);
  setTimeout(() => document.getElementById('new-folder-name')?.focus(), 100);
}

// ЁЯЖХ ржирждрзБржи ржлрзЛрж▓рзНржбрж╛рж░ рждрзИрж░рж┐
function createNewFolder(language, index) {
  const folderName = document.getElementById('new-folder-name')?.value.trim();
  if (!folderName) {
    alert('ржлрзЛрж▓рзНржбрж╛рж░рзЗрж░ ржирж╛ржо рж▓рж┐ржЦрзБржи!');
    return;
  }
  
  const existingNames = Object.values(userFolders).map(folder => folder.name.toLowerCase());
  if (existingNames.includes(folderName.toLowerCase())) {
    alert('ржПржЗ ржирж╛ржорзЗ ржлрзЛрж▓рзНржбрж╛рж░ ржЖржЫрзЗ!');
    return;
  }
  
  const folderId = 'folder_' + Date.now();
  userFolders[folderId] = {
    name: folderName,
    items: [{
      language: currentLanguage,
      langKey: language,
      index: index,
      addedDate: new Date().toISOString()
    }],
    created: new Date().toISOString()
  };
  
  localStorage.setItem('speakeu_folders', JSON.stringify(userFolders));
  closeFolderDialog();
  showSuccessMessage(`"${folderName}" ржлрзЛрж▓рзНржбрж╛рж░рзЗ рж╕рзЗржн рж╣ржпрж╝рзЗржЫрзЗ!`);
}

// ЁЯУВ ржмрж┐ржжрзНржпржорж╛ржи ржлрзЛрж▓рзНржбрж╛рж░рзЗ рж╕рзЗржн
function saveToExistingFolder(folderId, language, index) {
  const exists = userFolders[folderId].items.some(item => 
    item.language === currentLanguage && item.langKey === language && item.index === index
  );
  
  if (exists) {
    alert('ржПржЗ ржмрж╛ржХрзНржпржЯрж┐ ржЗрждрж┐ржоржзрзНржпрзЗ ржЖржЫрзЗ!');
    return;
  }
  
  userFolders[folderId].items.push({
    language: currentLanguage,
    langKey: language,
    index: index,
    addedDate: new Date().toISOString()
  });
  
  localStorage.setItem('speakeu_folders', JSON.stringify(userFolders));
  closeFolderDialog();
  showSuccessMessage(`"${userFolders[folderId].name}" ржлрзЛрж▓рзНржбрж╛рж░рзЗ рж╕рзЗржн рж╣ржпрж╝рзЗржЫрзЗ!`);
}

// тЭМ ржбрж╛ржпрж╝рж╛рж▓ржЧ ржмржирзНржз
function closeFolderDialog() {
  document.querySelector('.folder-dialog-overlay')?.remove();
}

// ЁЯУБ ржлрзЛрж▓рзНржбрж╛рж░ ржнрж┐ржЙ
function showFolderView() {
  hideHomePage();
  hideError();
  showingFolderContent = true;
  
  const folderIds = Object.keys(userFolders);
  
  if (folderIds.length === 0) {
    conversationArea.innerHTML = `
      <div style="text-align: center; padding: 50px;">
        <h2>ЁЯУБ ржХрзЛржирзЛ ржлрзЛрж▓рзНржбрж╛рж░ ржирзЗржЗ</h2>
        <p>ржХржерзЛржкржХржержирзЗрж░ ржкрж╛рж╢рзЗ ЁЯТ╛ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржлрзЛрж▓рзНржбрж╛рж░ рждрзИрж░рж┐ ржХрж░рзБржиред</p>
        <button onclick="showAllItems()" class="control-btn">тЖР рж╕ржм ржХржерзЛржкржХржержи ржжрзЗржЦрзБржи</button>
      </div>
    `;
    return;
  }

  conversationArea.innerHTML = `
    <div class="folders-container">
      <div class="favorites-header">
        <h2>ЁЯУБ ржЖржорж╛рж░ ржлрзЛрж▓рзНржбрж╛рж░</h2>
        <div>
          <select id="folder-selector" onchange="showSelectedFolderContent(this.value)" style="padding: 10px; margin-right: 10px; border-radius: 5px;">
            <option value="">-- ржлрзЛрж▓рзНржбрж╛рж░ ржмрзЗржЫрзЗ ржирж┐ржи --</option>
            ${folderIds.map(folderId => `
              <option value="${folderId}">${userFolders[folderId].name} (${userFolders[folderId].items.length})</option>
            `).join('')}
          </select>
          <button onclick="showAllItems()" class="control-btn">тЖР рж╕ржм ржХржерзЛржкржХржержи</button>
        </div>
      </div>
      
      <div id="folder-content-area">
        <p style="text-align: center; padding: 30px; color: #666;">ржЙржкрж░рзЗрж░ dropdown ржерзЗржХрзЗ ржПржХржЯрж┐ ржлрзЛрж▓рзНржбрж╛рж░ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржиред</p>
      </div>
    </div>
  `;
}

// ЁЯУВ ржирж┐рж░рзНржмрж╛ржЪрж┐ржд ржлрзЛрж▓рзНржбрж╛рж░ ржХржирзНржЯрзЗржирзНржЯ
function showSelectedFolderContent(folderId) {
  const contentArea = document.getElementById('folder-content-area');
  if (!folderId || !contentArea) {
    if (contentArea) {
      contentArea.innerHTML = '<p style="text-align: center; padding: 30px;">ржПржХржЯрж┐ ржлрзЛрж▓рзНржбрж╛рж░ рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рзБржиред</p>';
    }
    return;
  }
  
  const folder = userFolders[folderId];
  if (!folder) return;
  
  if (folder.items.length === 0) {
    contentArea.innerHTML = '<p style="text-align: center; padding: 30px;">ржПржЗ ржлрзЛрж▓рзНржбрж╛рж░рзЗ ржХрзЛржирзЛ ржмрж╛ржХрзНржп ржирзЗржЗред</p>';
    return;
  }

  let folderContentHtml = `<h3>ЁЯУВ ${folder.name} (${folder.items.length} ржмрж╛ржХрзНржп)</h3>`;
  
  folder.items.forEach((item, itemIndex) => {
    // ржнрж╛рж╖рж╛рж░ ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛
    if (item.language === currentLanguage && currentData.length > 0 && currentData[item.index]) {
      const dataItem = currentData[item.index];
      const localLang = dataItem[item.langKey] || 'тАФ';
      const bn = dataItem.bn || 'тАФ';
      const bnMeaning = dataItem.bnMeaning || 'тАФ';
      const en = dataItem.en || 'тАФ';

      folderContentHtml += `
        <div class="conversation-item">
          <button onclick="removeFromFolder('${folderId}', ${itemIndex})" 
                  style="position: absolute; top: 10px; right: 10px; background: #dc3545; color: white; border: none; border-radius: 50%; width: 30px; height: 30px; cursor: pointer;" 
                  title="ржлрзЛрж▓рзНржбрж╛рж░ ржерзЗржХрзЗ ржорзБржЫрзБржи">├Ч</button>
          
          <div>ЁЯЧгя╕П <strong>${localLang}</strong></div>
          <div>ЁЯУЭ <span>${bn}</span></div>
          <div>ЁЯУШ <em>${bnMeaning}</em></div>
          <div>ЁЯФд <span>${en}</span></div>
        </div>
      `;
    } else {
      folderContentHtml += `
        <div class="conversation-item">
          <button onclick="removeFromFolder('${folderId}', ${itemIndex})" 
                  style="position: absolute; top: 10px; right: 10px; background: #dc3545; color: white; border: none; border-radius: 50%; width: 30px; height: 30px; cursor: pointer;" 
                  title="ржлрзЛрж▓рзНржбрж╛рж░ ржерзЗржХрзЗ ржорзБржЫрзБржи">├Ч</button>
          
          <div>тЪая╕П <strong>ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░рж╛ ржпрж╛ржпрж╝ржирж┐</strong></div>
          <div>ЁЯУЭ ржнрж╛рж╖рж╛: ${item.language}</div>
          <div>ЁЯУШ ржЗржиржбрзЗржХрзНрж╕: ${item.index}</div>
        </div>
      `;
    }
  });
  
  contentArea.innerHTML = folderContentHtml;
}

// ЁЯЧСя╕П ржлрзЛрж▓рзНржбрж╛рж░ ржерзЗржХрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛
function removeFromFolder(folderId, itemIndex) {
  if (confirm('ржПржЗ ржмрж╛ржХрзНржпржЯрж┐ ржлрзЛрж▓рзНржбрж╛рж░ ржерзЗржХрзЗ ржорзБржЫрзЗ ржлрзЗрж▓ржмрзЗржи?')) {
    userFolders[folderId].items.splice(itemIndex, 1);
    localStorage.setItem('speakeu_folders', JSON.stringify(userFolders));
    showSelectedFolderContent(folderId);
    showSuccessMessage('ржлрзЛрж▓рзНржбрж╛рж░ ржерзЗржХрзЗ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ!');
  }
}

// ЁЯУд рж╕ржм ржлрзЛрж▓рзНржбрж╛рж░ ржПржХрзНрж╕ржкрзЛрж░рзНржЯ
function exportAllFolders() {
  if (Object.keys(userFolders).length === 0) {
    alert('ржХрзЛржирзЛ ржлрзЛрж▓рзНржбрж╛рж░ ржирзЗржЗ!');
    return;
  }
  
  const dataStr = JSON.stringify(userFolders, null, 2);
  const blob = new Blob([dataStr], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `speakeu_folders_${new Date().toISOString().split('T')[0]}.json`;
  a.click();
  URL.revokeObjectURL(url);
  showSuccessMessage('ржлрзЛрж▓рзНржбрж╛рж░ ржПржХрзНрж╕ржкрзЛрж░рзНржЯ рж╣ржпрж╝рзЗржЫрзЗ!');
}

// ЁЯУе ржлрзЛрж▓рзНржбрж╛рж░ ржЗржоржкрзЛрж░рзНржЯ
function importFolders() {
  const input = document.createElement('input');
  input.type = 'file';
  input.accept = '.json';
  input.onchange = function(e) {
    const file = e.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = function(e) {
      try {
        const importedData = JSON.parse(e.target.result);
        
        // ржбрзЗржЯрж╛ ржнрзНржпрж╛рж▓рж┐ржбрзЗрж╢ржи
        if (typeof importedData !== 'object') {
          throw new Error('ржнрзБрж▓ ржлрж░ржорзНржпрж╛ржЯ');
        }
        
        // ржмрж┐ржжрзНржпржорж╛ржи ржбрзЗржЯрж╛рж░ рж╕рж╛ржерзЗ ржорж╛рж░рзНржЬ
        Object.assign(userFolders, importedData);
        localStorage.setItem('speakeu_folders', JSON.stringify(userFolders));
        showSuccessMessage('ржлрзЛрж▓рзНржбрж╛рж░ ржЗржоржкрзЛрж░рзНржЯ рж╣ржпрж╝рзЗржЫрзЗ!');
        
        if (showingFolderContent) {
          showFolderView();
        }
      } catch (error) {
        alert('ржлрж╛ржЗрж▓ ржЗржоржкрзЛрж░рзНржЯ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: ' + error.message);
      }
    };
    reader.readAsText(file);
  };
  input.click();
}

// ЁЯФД рж╕ржм ржбрзЗржЯрж╛ рж░рж┐рж╕рзЗржЯ
function resetAllData() {
  if (confirm('рж╕ржм ржбрзЗржЯрж╛ ржорзБржЫрзЗ ржлрзЗрж▓ржмрзЗржи? ржПржЗ ржХрж╛ржЬ ржкрзВрж░рзНржмрж╛ржмрж╕рзНржерж╛ржпрж╝ ржлрзЗрж░рж╛ржирзЛ ржпрж╛ржмрзЗ ржирж╛!')) {
    localStorage.removeItem('speakeu_folders');
    localStorage.removeItem('selectedLanguage');
    localStorage.removeItem('theme');
    userFolders = {};
    alert('рж╕ржм ржбрзЗржЯрж╛ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ!');
    location.reload();
  }
}

// ЁЯУД ржЕржирзНржпрж╛ржирзНржп ржкрзЗржЗржЬ
function showAboutPage() {
  hideHomePage();
  conversationArea.innerHTML = `
    <div style="text-align: center; padding: 40px;">
      <h2>ЁЯМН Speak EU рж╕ржорзНржкрж░рзНржХрзЗ</h2>
      <p>ржЗржЙрж░рзЛржкрзАржпрж╝ ржнрж╛рж╖рж╛ рж╢рзЗржЦрж╛рж░ рж╕рж╣ржЬ ржЕрзНржпрж╛ржк</p>
      <p><strong>ржнрж╛рж░рзНрж╕ржи:</strong> 2.0</p>
      <p><strong>рждрзИрж░рж┐:</strong> рзирзжрзирзк</p>
      <button onclick="showHomePage()" class="control-btn">тЖР рж╣рзЛржорзЗ ржлрж┐рж░рзБржи</button>
    </div>
  `;
  sideMenu.classList.remove('active');
}

// ЁЯПа рж╕ржм ржЖржЗржЯрзЗржо ржжрзЗржЦрж╛ржирзЛ
function showAllItems() {
  showingFolderContent = false;
  if (currentLanguage && currentData.length > 0) {
    renderVocabulary(currentData, langCodeMap[currentLanguage]);
  } else {
    showHomePage();
  }
}

// ЁЯПа рж╣рзЛржоржкрзЗржЗржЬ рж▓рзБржХрж╛ржирзЛ
function hideHomePage() {
  const homepageContent = document.getElementById('homepage-content');
  if (homepageContent) {
    homepageContent.style.display = 'none';
  }
}

// тЪая╕П ржПрж░рж░ ржжрзЗржЦрж╛ржирзЛ/рж▓рзБржХрж╛ржирзЛ
function showError(message) {
  const errorDisplay = document.getElementById('error-display');
  const errorMessage = document.getElementById('error-message');
  if (errorDisplay && errorMessage) {
    errorMessage.textContent = message;
    errorDisplay.style.display = 'block';
  }
}

function hideError() {
  const errorDisplay = document.getElementById('error-display');
  if (errorDisplay) {
    errorDisplay.style.display = 'none';
  }
}

// тЬЕ рж╕ржлрж▓ ржмрж╛рж░рзНрждрж╛
function showSuccessMessage(message) {
  const toast = document.createElement('div');
  toast.innerHTML = `
    <div style="position: fixed; top: 20px; right: 20px; background: #28a745; color: white; padding: 15px 25px; border-radius: 10px; z-index: 1001; box-shadow: 0 5px 15px rgba(0,0,0,0.3);">
      тЬЕ ${message}
    </div>
  `;
  document.body.appendChild(toast);
  
  setTimeout(() => {
    toast.remove();
  }, 3000);
}

// ЁЯОп ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи (рж╣рзЛржо ржкрзЗржЗржЬ ржерзЗржХрзЗ)
function selectLanguage(lang) {
  languageSelect.value = lang;
  localStorage.setItem('selectedLanguage', lang);
  loadLanguage(lang);
}

// ЁЯОи рж╕рзНржорзБрже рж╕рзНржХрзНрж░рж▓рж┐ржВ
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
  anchor.addEventListener('click', function (e) {
    e.preventDefault();
    const target = document.querySelector(this.getAttribute('href'));
    if (target) {
      target.scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });
    }
  });
});
