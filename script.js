// üéØ ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
const CONFIG = {
  DAILY_TARGET: 10,
  LANGUAGES_PATH: 'languages/', // ‡¶≠‡¶æ‡¶∑‡¶æ‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶™‡¶•
  STORAGE_KEYS: {
    selectedLanguage: 'speak_eu_language',
    theme: 'speak_eu_theme',
    dailyProgress: 'speak_eu_daily_progress',
    userStats: 'speak_eu_user_stats'
  }
};

// üéÆ DOM ‡¶è‡¶≤‡¶ø‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡¶∏
const elements = {
  languageSelect: document.getElementById('language-select'),
  conversationArea: document.getElementById('conversation-area'),
  welcomeContent: document.getElementById('welcome-content'),
  vocabularyContent: document.getElementById('vocabulary-content'),
  loadingContainer: document.getElementById('loading-container'),
  searchSection: document.getElementById('search-section'),
  progressSection: document.getElementById('progress-section'),
  
  // ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤‡¶∏
  modeToggle: document.getElementById('mode-toggle'),
  menuToggle: document.getElementById('menu-toggle'),
  closeMenu: document.getElementById('close-menu'),
  sideMenu: document.getElementById('side-menu'),
  
  // ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö
  vocabularySearch: document.getElementById('vocabulary-search'),
  searchBtn: document.getElementById('search-btn'),
  clearFilters: document.getElementById('clear-filters'),
  
  // ‡¶™‡ßç‡¶∞‡¶ó‡ßç‡¶∞‡ßá‡¶∏
  dailyProgress: document.getElementById('daily-progress'),
  wordsLearnedToday: document.getElementById('words-learned-today'),
  totalWordsLearned: document.getElementById('total-words-learned'),
  currentStreak: document.getElementById('current-streak'),
  
  // ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø
  toastContainer: document.getElementById('toast-container')
};

// üó∫Ô∏è ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™‡¶ø‡¶Ç
const langMap = {
  italy: 'it',
  spain: 'es',
  russian: 'ru',
  france: 'fr',
  germany: 'de',
  greece: 'el',
  portugal: 'pt',
  netherlands: 'nl'
};

// üìä ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ü‡ßá‡¶ü
let currentLanguage = '';
let vocabularyData = [];
let filteredData = [];
let searchQuery = '';

// üéõÔ∏è ‡¶á‡¶â‡¶ü‡¶ø‡¶≤‡¶ø‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
function getTodayDate() {
  return new Date().toISOString().split('T')[0];
}

function saveToStorage(key, value) {
  try {
    localStorage.setItem(key, JSON.stringify(value));
  } catch (error) {
    console.error('Storage error:', error);
  }
}

function loadFromStorage(key, defaultValue = null) {
  try {
    const item = localStorage.getItem(key);
    return item ? JSON.parse(item) : defaultValue;
  } catch (error) {
    console.error('Storage error:', error);
    return defaultValue;
  }
}

function showElement(element) {
  if (element) element.style.display = 'block';
}

function hideElement(element) {
  if (element) element.style.display = 'none';
}

function highlightText(text, query) {
  if (!query || typeof text !== 'string') return text;
  const regex = new RegExp(`(${query})`, 'gi');
  return text.replace(regex, '<mark style="background: yellow; padding: 2px;">$1</mark>');
}

// üéâ ‡¶ü‡ßã‡¶∏‡ßç‡¶ü ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ
function showToast(message, type = 'info') {
  if (!elements.toastContainer) return;
  
  const toast = document.createElement('div');
  const colors = {
    success: '#28a745',
    error: '#dc3545',
    warning: '#ffc107',
    info: '#0066cc'
  };
  
  const icons = {
    success: '‚úÖ',
    error: '‚ùå', 
    warning: '‚ö†Ô∏è',
    info: '‚ÑπÔ∏è'
  };
  
  toast.style.cssText = `
    background: white;
    padding: 16px 20px;
    margin-bottom: 12px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    border-left: 4px solid ${colors[type] || colors.info};
    transform: translateX(100%);
    transition: transform 0.3s ease;
    cursor: pointer;
    position: relative;
    z-index: 1002;
  `;
  
  toast.innerHTML = `
    <div style="display: flex; align-items: center; gap: 12px; color: #333;">
      <span style="font-size: 18px;">${icons[type] || icons.info}</span>
      <span style="flex: 1; font-weight: 500;">${message}</span>
    </div>
  `;
  
  elements.toastContainer.appendChild(toast);
  
  setTimeout(() => {
    toast.style.transform = 'translateX(0)';
  }, 100);
  
  setTimeout(() => {
    removeToast(toast);
  }, 4000);
  
  toast.addEventListener('click', () => {
    removeToast(toast);
  });
}

function removeToast(toast) {
  if (toast && toast.parentNode) {
    toast.style.transform = 'translateX(100%)';
    setTimeout(() => {
      if (toast.parentNode) {
        toast.parentNode.removeChild(toast);
      }
    }, 300);
  }
}

// üìà ‡¶™‡ßç‡¶∞‡¶ó‡ßç‡¶∞‡ßá‡¶∏ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶∞
function getDailyProgress() {
  const today = getTodayDate();
  let progress = loadFromStorage(CONFIG.STORAGE_KEYS.dailyProgress, {
    date: today,
    wordsLearned: 0,
    target: CONFIG.DAILY_TARGET
  });
  
  if (progress.date !== today) {
    progress = {
      date: today,
      wordsLearned: 0,
      target: CONFIG.DAILY_TARGET
    };
    saveToStorage(CONFIG.STORAGE_KEYS.dailyProgress, progress);
  }
  
  return progress;
}

function updateDailyProgress(increment = 1) {
  const progress = getDailyProgress();
  progress.wordsLearned += increment;
  saveToStorage(CONFIG.STORAGE_KEYS.dailyProgress, progress);
  
  updateUserStats(increment);
  updateProgressDisplay();
  
  return progress;
}

function updateUserStats(increment = 1) {
  const today = getTodayDate();
  let stats = loadFromStorage(CONFIG.STORAGE_KEYS.userStats, {
    totalWordsLearned: 0,
    currentStreak: 0,
    lastActiveDate: null
  });
  
  stats.totalWordsLearned += increment;
  
  if (stats.lastActiveDate !== today) {
    if (stats.lastActiveDate) {
      const lastDate = new Date(stats.lastActiveDate);
      const todayDate = new Date(today);
      const daysDiff = Math.floor((todayDate - lastDate) / (1000 * 60 * 60 * 24));
      
      if (daysDiff === 1) {
        stats.currentStreak += 1;
      } else if (daysDiff > 1) {
        stats.currentStreak = 1;
      }
    } else {
      stats.currentStreak = 1;
    }
    
    stats.lastActiveDate = today;
  }
  
  saveToStorage(CONFIG.STORAGE_KEYS.userStats, stats);
  updateStatsDisplay();
}

function updateProgressDisplay() {
  const progress = getDailyProgress();
  const percentage = Math.round((progress.wordsLearned / progress.target) * 100);
  
  if (elements.dailyProgress) {
    elements.dailyProgress.style.width = `${Math.min(percentage, 100)}%`;
  }
  
  if (elements.wordsLearnedToday) {
    elements.wordsLearnedToday.textContent = `${progress.wordsLearned}/${progress.target}`;
  }
}

function updateStatsDisplay() {
  const stats = loadFromStorage(CONFIG.STORAGE_KEYS.userStats, {
    totalWordsLearned: 0,
    currentStreak: 0
  });
  
  if (elements.totalWordsLearned) {
    elements.totalWordsLearned.textContent = stats.totalWordsLearned;
  }
  
  if (elements.currentStreak) {
    elements.currentStreak.textContent = stats.currentStreak;
  }
}

// üìö ‡¶≠‡ßã‡¶ï‡¶æ‡¶¨‡ßÅ‡¶≤‡¶æ‡¶∞‡¶ø ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶æ‡¶∞
async function loadLanguage(lang) {
  try {
    showLoading();
    currentLanguage = lang;
    
    console.log(`Loading ${CONFIG.LANGUAGES_PATH}${lang}.json...`);
    
    // languages ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶≤‡ßã‡¶°
    const response = await fetch(`${CONFIG.LANGUAGES_PATH}${lang}.json`);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}. ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø: ${CONFIG.LANGUAGES_PATH}${lang}.json`);
    }
    
    const text = await response.text();
    
    if (!text.trim()) {
      throw new Error('‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶¨‡¶æ ‡¶Ö‡¶¨‡ßà‡¶ß');
    }
    
    try {
      vocabularyData = JSON.parse(text);
    } catch (parseError) {
      throw new Error('JSON ‡¶´‡¶æ‡¶á‡¶≤ ‡¶≠‡ßÅ‡¶≤ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶Ü‡¶õ‡ßá');
    }
    
    if (!Array.isArray(vocabularyData) || vocabularyData.length === 0) {
      throw new Error('‡¶≠‡ßã‡¶ï‡¶æ‡¶¨‡ßÅ‡¶≤‡¶æ‡¶∞‡¶ø ‡¶°‡ßá‡¶ü‡¶æ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶¨‡¶æ ‡¶Ö‡¶¨‡ßà‡¶ß');
    }
    
    filteredData = [...vocabularyData];
    
    console.log(`‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ${vocabularyData.length}‡¶ü‡¶ø ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá`);
    
    hideLoading();
    showVocabularyMode();
    renderVocabulary();
    
    showToast(`${getLanguageName(lang)} ‡¶≠‡¶æ‡¶∑‡¶æ‡¶∞ ${vocabularyData.length}‡¶ü‡¶ø ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!`, 'success');
    
  } catch (error) {
    console.error('‡¶≠‡¶æ‡¶∑‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:', error);
    hideLoading();
    showError(error.message);
    showToast(`‡¶≠‡¶æ‡¶∑‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: ${error.message}`, 'error');
  }
}

function showLoading() {
  hideElement(elements.welcomeContent);
  hideElement(elements.vocabularyContent);
  showElement(elements.loadingContainer);
}

function hideLoading() {
  hideElement(elements.loadingContainer);
}

function showVocabularyMode() {
  hideElement(elements.welcomeContent);
  showElement(elements.vocabularyContent);
  showElement(elements.searchSection);
  showElement(elements.progressSection);
}

function showWelcomeMode() {
  showElement(elements.welcomeContent);
  hideElement(elements.vocabularyContent);
  hideElement(elements.searchSection);
  hideElement(elements.progressSection);
}

function showError(message) {
  showWelcomeMode();
  
  const errorDiv = document.createElement('div');
  errorDiv.style.cssText = `
    text-align: center; 
    padding: 40px 20px; 
    background: white;
    border-radius: 12px;
    margin: 20px 0;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    border-left: 4px solid #dc3545;
  `;
  
  errorDiv.innerHTML = `
    <div style="font-size: 48px; margin-bottom: 16px;">‚ùå</div>
    <h3 style="color: #dc3545; margin-bottom: 12px;">‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ</h3>
    <p style="color: #666; margin-bottom: 20px; line-height: 1.6;">${message}</p>
    <div style="display: flex; gap: 12px; justify-content: center; flex-wrap: wrap;">
      <button onclick="location.reload()" 
              style="padding: 12px 24px; background: #0066cc; color: white; border: none; 
                     border-radius: 8px; cursor: pointer; font-weight: 500;">
        üîÑ ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
      </button>
      <button onclick="goHome()" 
              style="padding: 12px 24px; background: #6c757d; color: white; border: none; 
                     border-radius: 8px; cursor: pointer; font-weight: 500;">
        üè† ‡¶π‡ßã‡¶Æ‡ßá ‡¶´‡¶ø‡¶∞‡ßÅ‡¶®
      </button>
    </div>
    <div style="margin-top: 20px; padding: 16px; background: #f8f9fa; border-radius: 8px; font-size: 14px; color: #666;">
      <strong>‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®:</strong><br>
      ‚Ä¢ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá <code>languages</code> ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶∞‡ßÅ‡¶ü ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü‡¶∞‡¶ø‡¶§‡ßá ‡¶Ü‡¶õ‡ßá<br>
      ‚Ä¢ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶® <code>languages/${currentLanguage}.json</code> ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ú‡¶æ‡¶Ø‡¶º‡¶ó‡¶æ‡¶Ø‡¶º ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ<br>
      ‚Ä¢ JSON ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
    </div>
  `;
  
  elements.conversationArea.appendChild(errorDiv);
}

function goHome() {
  if (elements.languageSelect) {
    elements.languageSelect.value = '';
  }
  showWelcomeMode();
  // ‡¶è‡¶∞‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≠ ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
  const errorDivs = elements.conversationArea.querySelectorAll('div[style*="border-left: 4px solid #dc3545"]');
  errorDivs.forEach(div => div.remove());
}

// üîç ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶è‡¶¨‡¶Ç ‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞
function handleSearch() {
  if (!vocabularyData.length) return;
  
  searchQuery = elements.vocabularySearch ? elements.vocabularySearch.value.toLowerCase().trim() : '';
  
  if (searchQuery) {
    filteredData = vocabularyData.filter(item => {
      const searchableText = [
        item[langMap[currentLanguage]] || '',
        item.bn || '',
        item.bnMeaning || '',
        item.en || ''
      ].join(' ').toLowerCase();
      
      return searchableText.includes(searchQuery);
    });
    
    showToast(`"${searchQuery}" ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ${filteredData.length}‡¶ü‡¶ø ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá`, 'info');
  } else {
    filteredData = [...vocabularyData];
  }
  
  renderVocabulary();
}

function clearSearch() {
  searchQuery = '';
  if (elements.vocabularySearch) {
    elements.vocabularySearch.value = '';
  }
  filteredData = [...vocabularyData];
  renderVocabulary();
  showToast('‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá', 'success');
}

function renderVocabulary() {
  if (!elements.vocabularyContent) return;
  
  // ‡¶π‡ßá‡¶°‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø
  const header = document.createElement('div');
  header.className = 'vocabulary-header';
  header.innerHTML = `
    <div class="vocabulary-title">
      üìö ${getLanguageName(currentLanguage)} ‡¶∂‡¶¨‡ßç‡¶¶‡¶≠‡¶æ‡¶£‡ßç‡¶°‡¶æ‡¶∞
    </div>
    <div class="vocabulary-stats">
      ‡¶Æ‡ßã‡¶ü: ${vocabularyData.length} | ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá: ${filteredData.length}
      ${searchQuery ? ` | ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá‡¶õ‡ßá‡¶®: "${searchQuery}"` : ''}
    </div>
  `;
  
  // ‡¶ó‡ßç‡¶∞‡¶ø‡¶° ‡¶§‡ßà‡¶∞‡¶ø
  const grid = document.createElement('div');
  grid.className = 'vocabulary-grid';
  
  if (filteredData.length === 0) {
    grid.innerHTML = `
      <div style="text-align: center; padding: 60px 20px; color: var(--gray-500);">
        <div style="font-size: 48px; margin-bottom: 20px;">üîç</div>
        <h3 style="margin-bottom: 12px;">‡¶ï‡ßã‡¶® ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø</h3>
        <p>‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®</p>
      </div>
    `;
  } else {
    filteredData.forEach((item, index) => {
      const vocabItem = createVocabularyItem(item, index);
      grid.appendChild(vocabItem);
    });
  }
  
  // ‡¶ï‡¶®‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
  elements.vocabularyContent.innerHTML = '';
  elements.vocabularyContent.appendChild(header);
  elements.vocabularyContent.appendChild(grid);
}

function createVocabularyItem(item, index) {
  const localLang = item[langMap[currentLanguage]] || '‚Äî';
  const bn = item.bn || '‚Äî';
  const bnMeaning = item.bnMeaning || '‚Äî';
  const en = item.en || '‚Äî';
  
  const div = document.createElement('div');
  div.className = 'conversation-item';
  
  div.innerHTML = `
    <div>
      <span style="font-size: 20px;">üó£Ô∏è</span>
      <strong>${highlightText(localLang, searchQuery)}</strong>
      <button class="learn-btn" onclick="markAsLearned()" title="‡¶∂‡ßá‡¶ñ‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®">
        ‚úì ‡¶∂‡¶ø‡¶ñ‡ßá‡¶õ‡¶ø
      </button>
    </div>
    <div>
      <span style="font-size: 16px;">üìù</span>
      <span>${highlightText(bn, searchQuery)}</span>
    </div>
    <div>
      <span style="font-size: 16px;">üìò</span>
      <em>${highlightText(bnMeaning, searchQuery)}</em>
    </div>
    <div>
      <span style="font-size: 16px;">üî§</span>
      <span>${highlightText(en, searchQuery)}</span>
    </div>
  `;
  
  // ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü - ‡¶â‡¶ö‡ßç‡¶ö‡¶æ‡¶∞‡¶£
  div.addEventListener('click', (e) => {
    if (!e.target.classList.contains('learn-btn')) {
      speakText(localLang);
    }
  });
  
  return div;
}

function speakText(text) {
  if ('speechSynthesis' in window && text !== '‚Äî') {
    try {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = getSpeechLang(currentLanguage);
      utterance.rate = 0.8;
      speechSynthesis.speak(utterance);
      showToast('üîä ‡¶â‡¶ö‡ßç‡¶ö‡¶æ‡¶∞‡¶£ ‡¶∂‡ßã‡¶®‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá...', 'info');
    } catch (error) {
      console.error('Speech error:', error);
    }
  }
}

function getSpeechLang(langKey) {
  const speechLangs = {
    italy: 'it-IT',
    spain: 'es-ES', 
    russian: 'ru-RU',
    france: 'fr-FR',
    germany: 'de-DE',
    greece: 'el-GR'
  };
  return speechLangs[langKey] || 'en-US';
}

function markAsLearned() {
  const progress = updateDailyProgress(1);
  showToast('üéâ ‡¶®‡¶§‡ßÅ‡¶® ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶∂‡¶ø‡¶ñ‡ßá‡¶õ‡ßá‡¶®!', 'success');
  
  if (progress.wordsLearned >= progress.target) {
    setTimeout(() => {
      showToast('üèÜ ‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®! ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!', 'success');
    }, 1000);
  }
}

function getLanguageName(langKey) {
  const names = {
    italy: '‡¶á‡¶§‡¶æ‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶®',
    spain: '‡¶∏‡ßç‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶∂', 
    russian: '‡¶∞‡ßÅ‡¶∂',
    france: '‡¶´‡ßç‡¶∞‡ßá‡¶û‡ßç‡¶ö',
    germany: '‡¶ú‡¶æ‡¶∞‡ßç‡¶Æ‡¶æ‡¶®',
    greece: '‡¶ó‡ßç‡¶∞‡¶ø‡¶ï',
    portugal: '‡¶™‡¶∞‡ßç‡¶§‡ßÅ‡¶ó‡¶ø‡¶ú',
    netherlands: '‡¶°‡¶æ‡¶ö'
  };
  return names[langKey] || '‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ';
}

// üéõÔ∏è UI ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤‡¶æ‡¶∞
function toggleTheme() {
  const isDark = document.body.classList.toggle('dark-mode');
  if (elements.modeToggle) {
    elements.modeToggle.textContent = isDark ? 'üåô' : '‚òÄÔ∏è';
  }
  saveToStorage(CONFIG.STORAGE_KEYS.theme, isDark ? 'dark' : 'light');
  showToast(`${isDark ? '‡¶°‡¶æ‡¶∞‡ßç‡¶ï' : '‡¶≤‡¶æ‡¶á‡¶ü'} ‡¶Æ‡ßã‡¶° ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá`, 'success');
}

function toggleSideMenu() {
  if (elements.sideMenu) {
    elements.sideMenu.classList.add('active');
  }
}

function closeSideMenu() {
  if (elements.sideMenu) {
    elements.sideMenu.classList.remove('active');
  }
}

function showProgress() {
  const stats = loadFromStorage(CONFIG.STORAGE_KEYS.userStats, {});
  const progress = getDailyProgress();
  
  showToast(`üìä ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶ó‡ßç‡¶∞‡¶ó‡¶§‡¶ø:
‚Ä¢ ‡¶Ü‡¶ú: ${progress.wordsLearned}/${progress.target}
‚Ä¢ ‡¶Æ‡ßã‡¶ü: ${stats.totalWordsLearned || 0} ‡¶∂‡¶¨‡ßç‡¶¶
‚Ä¢ ‡¶ß‡¶æ‡¶∞‡¶æ‡¶¨‡¶æ‡¶π‡¶ø‡¶ï: ${stats.currentStreak || 0} ‡¶¶‡¶ø‡¶®`, 'info');
}

function showAbout() {
  showToast(`‚ÑπÔ∏è Speak EU v1.0
‡¶á‡¶â‡¶∞‡ßã‡¶™‡ßÄ‡¶Ø‡¶º ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∂‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø‡•§
‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡¶ø ‡¶Ö‡¶≠‡¶ø‡¶¨‡¶æ‡¶∏‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶π‡¶ú ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡•§`, 'info');
}

function showHelp() {
  showToast(`‚ùì ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø:
‚Ä¢ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
‚Ä¢ ‡¶∂‡¶¨‡ßç‡¶¶‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶â‡¶ö‡ßç‡¶ö‡¶æ‡¶∞‡¶£ ‡¶∂‡ßÅ‡¶®‡ßÅ‡¶®  
‚Ä¢ "‡¶∂‡¶ø‡¶ñ‡ßá‡¶õ‡¶ø" ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶ó‡ßç‡¶∞‡ßá‡¶∏ ‡¶¨‡¶æ‡¶°‡¶º‡¶æ‡¶®
‚Ä¢ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶® ‡ßß‡ß¶‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶∂‡¶ø‡¶ñ‡ßÅ‡¶®`, 'info');
}

// üöÄ ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡¶ø‡¶∏‡ßá‡¶®‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
function setupEventListeners() {
  // ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®
  if (elements.languageSelect) {
    elements.languageSelect.addEventListener('change', (e) => {
      const lang = e.target.value;
      if (lang) {
        saveToStorage(CONFIG.STORAGE_KEYS.selectedLanguage, lang);
        loadLanguage(lang);
      } else {
        showWelcomeMode();
      }
    });
  }
  
  // ‡¶•‡¶ø‡¶Æ ‡¶ü‡¶ó‡¶≤
  if (elements.modeToggle) {
    elements.modeToggle.addEventListener('click', toggleTheme);
  }
  
  // ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤
  if (elements.menuToggle) {
    elements.menuToggle.addEventListener('click', toggleSideMenu);
  }
  
  if (elements.closeMenu) {
    elements.closeMenu.addEventListener('click', closeSideMenu);
  }
  
  // ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö
  if (elements.vocabularySearch) {
    elements.vocabularySearch.addEventListener('input', handleSearch);
    elements.vocabularySearch.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        handleSearch();
      }
    });
  }
  
  if (elements.searchBtn) {
    elements.searchBtn.addEventListener('click', handleSearch);
  }
  
  if (elements.clearFilters) {
    elements.clearFilters.addEventListener('click', clearSearch);
  }
  
  // ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶ï‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï
  document.querySelectorAll('.language-card').forEach(card => {
    card.addEventListener('click', () => {
      const lang = card.dataset.lang;
      if (lang && elements.languageSelect) {
        elements.languageSelect.value = lang;
        elements.languageSelect.dispatchEvent(new Event('change'));
      }
    });
  });
  
  // ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ
  const menuActions = {
    'menu-home': () => {
      closeSideMenu();
      if (elements.languageSelect) elements.languageSelect.value = '';
      showWelcomeMode();
    },
    'menu-progress': () => {
      closeSideMenu();
      showProgress();
    },
    'menu-vocabulary': () => {
      closeSideMenu();
      if (currentLanguage) {
        showVocabularyMode();
      } else {
        showToast('‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®', 'warning');
      }
    },
    'menu-about': () => {
      closeSideMenu();
      showAbout();
    },
    'menu-help': () => {
      closeSideMenu();
      showHelp();
    }
  };
  
  Object.keys(menuActions).forEach(id => {
    const element = document.getElementById(id);
    if (element) {
      element.addEventListener('click', (e) => {
        e.preventDefault();
        menuActions[id]();
      });
    }
  });
}

// üì± ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®
function initializeApp() {
  console.log('Speak EU App ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...');
  
  // ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡¶ø‡¶∏‡ßá‡¶®‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
  setupEventListeners();
  
  // ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶≤‡ßã‡¶°
  const savedLang = loadFromStorage(CONFIG.STORAGE_KEYS.selectedLanguage);
  if (savedLang && elements.languageSelect) {
    elements.languageSelect.value = savedLang;
    loadLanguage(savedLang);
  }
  
  const savedTheme = loadFromStorage(CONFIG.STORAGE_KEYS.theme);
  if (savedTheme === 'dark') {
    document.body.classList.add('dark-mode');
    if (elements.modeToggle) elements.modeToggle.textContent = 'üåô';
  }
  
  // ‡¶™‡ßç‡¶∞‡¶ó‡ßç‡¶∞‡ßá‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
  updateProgressDisplay();
  updateStatsDisplay();
  
  // ‡¶ì‡¶Ø‡¶º‡ßá‡¶≤‡¶ï‡¶æ‡¶Æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú
  setTimeout(() => {
    showToast('üåü Speak EU ‡¶è ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶á‡¶â‡¶∞‡ßã‡¶™‡ßÄ‡¶Ø‡¶º ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∂‡¶ø‡¶ñ‡ßÅ‡¶® ‡¶∏‡¶π‡¶ú‡ßá‡¶á‡•§', 'success');
  }, 1000);
  
  console.log('Speak EU App ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!');
}

// üéØ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶≤‡ßã‡¶° ‡¶π‡¶≤‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
document.addEventListener('DOMContentLoaded', initializeApp);

// üåê ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (HTML ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
window.markAsLearned = markAsLearned;
window.goHome = goHome;
