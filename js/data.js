// ================================
// CONFIGURATION
// ================================

const CONFIG = {
  DAILY_TARGET: 10,
  LANGUAGES_PATH: 'Language/',
  AUDIO_PATH: 'audio/',
  STORAGE_KEYS: {
    selectedLanguage: 'speak_eu_language',
    theme: 'speak_eu_theme',
    dailyProgress: 'speak_eu_daily_progress',
    userStats: 'speak_eu_user_stats',
    userLevel: 'speak_eu_user_level',
    achievements: 'speak_eu_achievements',
    gameStats: 'speak_eu_game_stats',
    vocabulary: 'speak_eu_vocabulary'
  },
  ACHIEVEMENTS: {
    FIRST_WORDS: { id: 'first_10', threshold: 10, name: 'ржкрзНрж░ржержо рззрзжржЯрж┐ рж╢ржмрзНржж', icon: 'ЁЯеЗ', description: 'ржкрзНрж░ржержо рззрзжржЯрж┐ рж╢ржмрзНржж рж╢рж┐ржЦрзЗржЫрзЗржи' },
    CONSISTENT: { id: 'streak_7', threshold: 7, name: 'рзн ржжрж┐ржи ржзрж╛рж░рж╛ржмрж╛рж╣рж┐ржХ', icon: 'ЁЯФе', description: 'ржЯрж╛ржирж╛ рзн ржжрж┐ржи ржЕржирзБрж╢рзАрж▓ржи ржХрж░рзЗржЫрзЗржи' },
    POLYGLOT: { id: 'languages_3', threshold: 3, name: 'рзйржЯрж┐ ржнрж╛рж╖рж╛ рж╢рж┐ржЦрзЗржЫрзЗржи', icon: 'ЁЯМН', description: 'рзйржЯрж┐ ржнрж┐ржирзНржи ржжрзЗрж╢рзЗрж░ ржнрж╛рж╖рж╛ рж╢рж┐ржЦрзЗржЫрзЗржи' },
    MASTER: { id: 'words_100', threshold: 100, name: 'рззрзжрзжржЯрж┐ рж╢ржмрзНржж ржЖржпрж╝рждрзНржд', icon: 'ЁЯОУ', description: 'рззрзжрзжржЯрж┐ рж╢ржмрзНржж рж╕ржлрж▓ржнрж╛ржмрзЗ рж╢рж┐ржЦрзЗржЫрзЗржи' },
    PERFECTIONIST: { id: 'perfect_quiz', threshold: 1, name: 'ржирж┐ржЦрзБржБржд ржХрзБржЗржЬ', icon: 'ЁЯТп', description: 'ржПржХржЯрж┐ ржХрзБржЗржЬрзЗ рззрзжрзж% рж╕рзНржХрзЛрж░ ржкрзЗржпрж╝рзЗржЫрзЗржи' },
    SPEED_LEARNER: { id: 'fast_completion', threshold: 1, name: 'ржжрзНрж░рзБржд рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзА', icon: 'тЪб', description: 'ржжрзНрж░рзБрждрждржо рж╕ржоржпрж╝рзЗ ржПржХржЯрж┐ ржЧрзЗржо рж╕ржорзНржкржирзНржи ржХрж░рзЗржЫрзЗржи' }
  },
  LEVELS: {
    1: { minWords: 0, maxWords: 25, name: 'рж╢рж┐ржХрзНрж╖рж╛ржиржмрж┐рж╕' },
    2: { minWords: 26, maxWords: 75, name: 'ржкрзНрж░рж╛ржержорж┐ржХ' },
    3: { minWords: 76, maxWords: 150, name: 'ржоржзрзНржпржо' },
    4: { minWords: 151, maxWords: 300, name: 'ржЙржирзНржиржд' },
    5: { minWords: 301, maxWords: 500, name: 'ржжржХрзНрж╖' },
    6: { minWords: 501, maxWords: 1000, name: 'ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ' },
    7: { minWords: 1001, maxWords: Infinity, name: 'ржорж╛рж╕рзНржЯрж╛рж░' }
  }
};

// ================================
// COUNTRIES DATA
// ================================

const COUNTRIES_DATA = {
  // Schengen Countries
  austria: { 
    name: 'ржЕрж╕рзНржЯрзНрж░рж┐ржпрж╝рж╛', 
    language: 'Deutsch', 
    difficulty: 'medium', 
    flag: 'ЁЯЗжЁЯЗ╣', 
    isSchengen: true,
    capital: 'ржнрж┐ржпрж╝рзЗржирж╛',
    currency: 'ржЗржЙрж░рзЛ',
    population: 'рзо.рзп ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржЬрж╛рж░рзНржорж╛ржи ржнрж╛рж╖рж╛ ржорзВрж▓ ржнрж╛рж╖рж╛', 'ржХрзНрж▓рж╛рж╕рж┐ржХрзНржпрж╛рж▓ ржорж┐ржЙржЬрж┐ржХрзЗрж░ ржжрзЗрж╢', 'ржЖрж▓рзНржкрж╕ ржкрж░рзНржмрждржорж╛рж▓рж╛рж░ ржЬржирзНржп ржмрж┐ржЦрзНржпрж╛ржд']
  },
  belgium: { 
    name: 'ржмрзЗрж▓ржЬрж┐ржпрж╝рж╛ржо', 
    language: 'Nederlands/Fran├зais', 
    difficulty: 'hard', 
    flag: 'ЁЯЗзЁЯЗк', 
    isSchengen: true,
    capital: 'ржмрзНрж░рж╛рж╕рзЗрж▓рж╕',
    currency: 'ржЗржЙрж░рзЛ',
    population: 'рззрзз.рзл ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['рждрж┐ржиржЯрж┐ рж╕рж░ржХрж╛рж░рж┐ ржнрж╛рж╖рж╛', 'ржЪржХрж▓рзЗржЯ ржУ ржУржпрж╝рж╛ржлрж▓рзЗрж░ ржЬржирзНржп ржмрж┐ржЦрзНржпрж╛ржд', 'ржЗржЙрж░рзЛржкрзАржпрж╝ ржЗржЙржирж┐ржпрж╝ржирзЗрж░ рж╣рзЗржбржХрзЛржпрж╝рж╛рж░рзНржЯрж╛рж░']
  },
  bulgaria: { 
    name: 'ржмрзБрж▓ржЧрзЗрж░рж┐ржпрж╝рж╛', 
    language: '╨С╤К╨╗╨│╨░╤А╤Б╨║╨╕', 
    difficulty: 'hard', 
    flag: 'ЁЯЗзЁЯЗм', 
    isSchengen: true,
    capital: 'рж╕рзЛржлрж┐ржпрж╝рж╛',
    currency: 'рж▓рзЗржн',
    population: 'рзм.рзп ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['рж╕рж┐рж░рж┐рж▓рж┐ржХ ржмрж░рзНржгржорж╛рж▓рж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ', 'ржпрзЛржЧрж╛рж░рзНржЯ ржУ ржЧрзЛрж▓рж╛ржкрзЗрж░ рждрзЗрж▓рзЗрж░ ржЬржирзНржп ржмрж┐ржЦрзНржпрж╛ржд', 'ржмрж▓ржХрж╛ржи ржЕржЮрзНржЪрж▓рзЗрж░ ржжрзЗрж╢']
  },
  croatia: { 
    name: 'ржХрзНрж░рзЛржпрж╝рзЗрж╢рж┐ржпрж╝рж╛', 
    language: 'Hrvatski', 
    difficulty: 'medium', 
    flag: 'ЁЯЗнЁЯЗ╖', 
    isSchengen: true,
    capital: 'ржЬрж╛ржЧрзНрж░рзЗржм',
    currency: 'ржЗржЙрж░рзЛ',
    population: 'рзй.рзп ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржЕрзНржпрж╛ржбрзНрж░рж┐ржпрж╝рж╛ржЯрж┐ржХ рж╕рж╛ржЧрж░рзЗрж░ рждрзАрж░рзЗ ржЕржмрж╕рзНржерж┐ржд', 'рж╕рзБржирзНржжрж░ ржЙржкржХрзВрж▓ ржУ ржжрзНржмрзАржкржкрзБржЮрзНржЬ', 'ржЧрзЗржо ржЕржл ржерзНрж░рзЛржирж╕рзЗрж░ рж╢рзБржЯрж┐ржВ рж╕рзНржкржЯ']
  },
  cyprus: { 
    name: 'рж╕рж╛ржЗржкрзНрж░рж╛рж╕', 
    language: '╬Х╬╗╬╗╬╖╬╜╬╣╬║╬м', 
    difficulty: 'hard', 
    flag: 'ЁЯЗиЁЯЗ╛', 
    isSchengen: true,
    capital: 'ржирж┐ржХрзЛрж╕рж┐ржпрж╝рж╛',
    currency: 'ржЗржЙрж░рзЛ',
    population: 'рзз.рзи ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржнрзВржоржзрзНржпрж╕рж╛ржЧрж░рзЗрж░ ржжрзНржмрзАржк ржжрзЗрж╢', 'ржЧрзНрж░рж┐ржХ ржУ рждрзБрж░рзНржХрж┐ ржнрж╛рж╖рж╛ ржкрзНрж░ржЪрж▓рж┐ржд', 'ржкрзНрж░рж╛ржЪрзАржи рж╕ржнрзНржпрждрж╛рж░ ржирж┐ржжрж░рзНрж╢ржи']
  },
  czechia: { 
    name: 'ржЪрзЗржХ ржкрзНрж░ржЬрж╛рждржирзНрждрзНрж░', 
    language: '─Мe┼бtina', 
    difficulty: 'hard', 
    flag: 'ЁЯЗиЁЯЗ┐', 
    isSchengen: true,
    capital: 'ржкрзНрж░рж╛ржЧ',
    currency: 'ржХрзНрж░рж╛ржЙржи',
    population: 'рззрзж.рзн ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['рж╕рзБржирзНржжрж░ рж╕рзНржерж╛ржкрждрзНржпрзЗрж░ ржЬржирзНржп ржмрж┐ржЦрзНржпрж╛ржд', 'ржмрж┐ржпрж╝рж╛рж░ ржкрзНрж░рзЗржорзАржжрзЗрж░ рж╕рзНржмрж░рзНржЧ', 'ржоржзрзНржп ржЗржЙрж░рзЛржкрзЗрж░ рж╣рзГржжржпрж╝']
  },
  denmark: { 
    name: 'ржбрзЗржиржорж╛рж░рзНржХ', 
    language: 'Dansk', 
    difficulty: 'medium', 
    flag: 'ЁЯЗйЁЯЗ░', 
    isSchengen: true,
    capital: 'ржХрзЛржкрзЗржирж╣рзЗржЧрзЗржи',
    currency: 'ржХрзНрж░рзЛржирзЗ',
    population: 'рзл.рзо ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржмрж╛ржЗрж╕рж╛ржЗржХрзЗрж▓-ржмрж╛ржирзНржзржм ржжрзЗрж╢', 'рж╕рзБржЦрзА ржжрзЗрж╢рзЗрж░ рждрж╛рж▓рж┐ржХрж╛ржпрж╝ рж╢рзАрж░рзНрж╖рзЗ', 'ржнрж╛ржЗржХрж┐ржВржжрзЗрж░ ржжрзЗрж╢']
  },
  estonia: { 
    name: 'ржПрж╕рзНрждрзЛржирж┐ржпрж╝рж╛', 
    language: 'Eesti', 
    difficulty: 'hard', 
    flag: 'ЁЯЗкЁЯЗк', 
    isSchengen: true,
    capital: 'рждрж╛рж▓рзНрж▓рж┐ржи',
    currency: 'ржЗржЙрж░рзЛ',
    population: 'рзз.рзй ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржбрж┐ржЬрж┐ржЯрж╛рж▓ ржирзЛржорж╛ржбржжрзЗрж░ рж╕рзНржмрж░рзНржЧ', 'ржЗ-рж░рзЗрж╕рж┐ржбрзЗржирзНрж╕рж┐ ржкрзНрж░рзЛржЧрзНрж░рж╛ржо', 'рж╕рзНржХрж╛ржЗржкрзЗрж░ ржЬржирзНржорж╕рзНржерж╛ржи']
  },
  finland: { 
    name: 'ржлрж┐ржирж▓рзНржпрж╛ржирзНржб', 
    language: 'Suomi', 
    difficulty: 'hard', 
    flag: 'ЁЯЗлЁЯЗо', 
    isSchengen: true,
    capital: 'рж╣рзЗрж▓рж╕рж┐ржЩрзНржХрж┐',
    currency: 'ржЗржЙрж░рзЛ',
    population: 'рзл.рзл ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['рж╕рж╛ржЙржирж╛рж░ ржЬржирзНржорж╕рзНржерж╛ржи', 'рж╢рж┐ржХрзНрж╖рж╛ ржмрзНржпржмрж╕рзНржерж╛рж░ ржЬржирзНржп ржмрж┐ржЦрзНржпрж╛ржд', 'рж╕рж╛ржирзНрждрж╛ ржХрзНрж▓ржЬрзЗрж░ ржжрзЗрж╢']
  },
  france: { 
    name: 'ржлрзНрж░рж╛ржирзНрж╕', 
    language: 'Fran├зais', 
    difficulty: 'medium', 
    flag: 'ЁЯЗлЁЯЗ╖', 
    isSchengen: true,
    capital: 'ржкрзНржпрж╛рж░рж┐рж╕',
    currency: 'ржЗржЙрж░рзЛ',
    population: 'рзмрзн.рзк ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржлрзНржпрж╛рж╢ржи ржУ рж░ржирзНржзржирж╢рж┐рж▓рзНржкрзЗрж░ рж░рж╛ржЬржзрж╛ржирзА', 'ржЖржЗржлрзЗрж▓ ржЯрж╛ржУржпрж╝рж╛рж░ ржУ рж▓рзБржнрж░ ржорж┐ржЙржЬрж┐ржпрж╝рж╛ржо', 'ржмрж┐рж╢рзНржмрзЗрж░ рж╕ржмржЪрзЗржпрж╝рзЗ ржмрзЗрж╢рж┐ ржкрж░рзНржпржЯржХ']
  },
  germany: { 
    name: 'ржЬрж╛рж░рзНржорж╛ржирж┐', 
    language: 'Deutsch', 
    difficulty: 'medium', 
    flag: 'ЁЯЗйЁЯЗк', 
    isSchengen: true,
    capital: 'ржмрж╛рж░рзНрж▓рж┐ржи',
    currency: 'ржЗржЙрж░рзЛ',
    population: 'рзорзй.рзи ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржЗржЙрж░рзЛржкрзЗрж░ ржЕрж░рзНржержирзИрждрж┐ржХ рж╢ржХрзНрждрж┐', 'ржЕржЯрзЛржорзЛржмрж╛ржЗрж▓ ржЗржирзНржбрж╛рж╕рзНржЯрзНрж░рж┐рж░ ржЬржирзНржп ржмрж┐ржЦрзНржпрж╛ржд', 'ржмрж┐ржпрж╝рж╛рж░ ржУ ржмрзНрж░рзЗржб рж╕ржВрж╕рзНржХрзГрждрж┐']
  },
  greece: { 
    name: 'ржЧрзНрж░рж┐рж╕', 
    language: '╬Х╬╗╬╗╬╖╬╜╬╣╬║╬м', 
    difficulty: 'hard', 
    flag: 'ЁЯЗмЁЯЗ╖', 
    isSchengen: true,
    capital: 'ржПржерзЗржирзНрж╕',
    currency: 'ржЗржЙрж░рзЛ',
    population: 'рззрзж.рзн ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржкрж╢рзНржЪрж┐ржорж╛ рж╕ржнрзНржпрждрж╛рж░ ржЬржирзНржорж╕рзНржерж╛ржи', 'рж╕рзБржирзНржжрж░ ржжрзНржмрзАржк ржУ рж╕ржорзБржжрзНрж░ рж╕рзИржХржд', 'ржЕрж▓рж┐ржорзНржкрж┐ржХрзЗрж░ ржЬржирзНржорж╕рзНржерж╛ржи']
  },
  hungary: { 
    name: 'рж╣рж╛ржЩрзНржЧрзЗрж░рж┐', 
    language: 'Magyar', 
    difficulty: 'hard', 
    flag: 'ЁЯЗнЁЯЗ║', 
    isSchengen: true,
    capital: 'ржмрзБржжрж╛ржкрзЗрж╕рзНржЯ',
    currency: 'ржлрж░рж┐ржирзНржЯ',
    population: 'рзп.рзн ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржерж╛рж░рзНржорж╛рж▓ рж╕рзНржкрзНрж░рж┐ржВрж╕рзЗрж░ ржЬржирзНржп ржмрж┐ржЦрзНржпрж╛ржд', 'ржбрж╛ржирзБржм ржиржжрзАрж░ ржжрзБржЗ рждрзАрж░рзЗ рж░рж╛ржЬржзрж╛ржирзА', 'ржЗржЙржирж┐ржХ ржорзНржпрж╛ржЧржпрж╝рж╛рж░ ржнрж╛рж╖рж╛']
  },
  iceland: { 
    name: 'ржЖржЗрж╕рж▓рзНржпрж╛ржирзНржб', 
    language: '├Нslenska', 
    difficulty: 'hard', 
    flag: 'ЁЯЗоЁЯЗ╕', 
    isSchengen: true,
    capital: 'рж░рзЗржЗржХрж┐ржпрж╝рж╛ржнрж┐ржХ',
    currency: 'ржХрзНрж░рзЛржирж╛',
    population: 'рзй.рзн рж╣рж╛ржЬрж╛рж░',
    tips: ['ржЙрждрзНрждрж░ ржорзЗрж░рзБрж░ ржЖрж▓рзЛ ржжрзЗржЦрж╛рж░ ржЬржирзНржп ржмрж┐ржЦрзНржпрж╛ржд', 'ржЖржЧрзНржирзЗржпрж╝ржЧрж┐рж░рж┐ ржУ ржЧрж┐ржЬрж╛рж░', 'ржмрж┐рж╢рзНржмрзЗрж░ рж╕ржмржЪрзЗржпрж╝рзЗ ржирж┐рж░рж╛ржкржж ржжрзЗрж╢']
  },
  italy: { 
    name: 'ржЗрждрж╛рж▓рж┐', 
    language: 'Italiano', 
    difficulty: 'easy', 
    flag: 'ЁЯЗоЁЯЗ╣', 
    isSchengen: true,
    capital: 'рж░рзЛржо',
    currency: 'ржЗржЙрж░рзЛ',
    population: 'рзлрзп.рзз ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржкрж┐ржЬрзНржЬрж╛ ржУ ржкрж╛рж╕рзНрждрж╛рж░ ржЬржирзНржорж╕рзНржерж╛ржи', 'рж░рзЗржирзЗрж╕рж╛ржБрж░ ржХрзЗржирзНржжрзНрж░ржнрзВржорж┐', 'ржХрж▓рзЛрж╕рж┐ржпрж╝рж╛ржо ржУ ржнрзНржпрж╛ржЯрж┐ржХрж╛ржи рж╕рж┐ржЯрж┐']
  },
  latvia: { 
    name: 'рж▓рж╛ржЯржнрж┐ржпрж╝рж╛', 
    language: 'Latvie┼бu', 
    difficulty: 'hard', 
    flag: 'ЁЯЗ▒ЁЯЗ╗', 
    isSchengen: true,
    capital: 'рж░рж┐ржЧрж╛',
    currency: 'ржЗржЙрж░рзЛ',
    population: 'рзз.рзп ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржмрж╛рж▓рзНржЯрж┐ржХ рж╕рж╛ржЧрж░рзЗрж░ рждрзАрж░рзЗ ржЕржмрж╕рзНржерж┐ржд', 'ржоржзрзНржпржпрзБржЧрзАржпрж╝ рж╕рзНржерж╛ржкрждрзНржп', 'ржЬржЩрзНржЧрж▓ ржУ рж▓рзЗржХрзЗрж░ ржжрзЗрж╢']
  },
  liechtenstein: { 
    name: 'рж▓рж┐рж╢ржЯрзЗржирж╕рзНржЯрж╛ржЗржи', 
    language: 'Deutsch', 
    difficulty: 'medium', 
    flag: 'ЁЯЗ▒ЁЯЗо', 
    isSchengen: true,
    capital: 'ржнрж╛ржжрзБржЬ',
    currency: 'рж╕рзБржЗрж╕ ржлрзНрж░рж╛ржЩрзНржХ',
    population: 'рзйрзо рж╣рж╛ржЬрж╛рж░',
    tips: ['ржмрж┐рж╢рзНржмрзЗрж░ ржЪрждрзБрж░рзНрже ржХрзНрж╖рзБржжрзНрж░рждржо ржжрзЗрж╢', 'ржЖрж▓рзНржкрж╕рзЗрж░ ржорж╛ржЭрзЗ ржЕржмрж╕рзНржерж┐ржд', 'ржкрзНрж░рж┐ржирзНрж╕рж┐ржкрж╛рж▓рж┐ржЯрж┐']
  },
  lithuania: { 
    name: 'рж▓рж┐ржерзБржпрж╝рж╛ржирж┐ржпрж╝рж╛', 
    language: 'Lietuvi┼│', 
    difficulty: 'hard', 
    flag: 'ЁЯЗ▒ЁЯЗ╣', 
    isSchengen: true,
    capital: 'ржнрж┐рж▓ржирж┐ржпрж╝рж╛рж╕',
    currency: 'ржЗржЙрж░рзЛ',
    population: 'рзи.рзо ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржмрж╛рж▓рзНржЯрж┐ржХ рж╕рзНржЯрзЗржЯрж╕рзЗрж░ ржмрзГрж╣рждрзНрждржо', 'рж╕рзБржирзНржжрж░ ржкрзБрж░рж╛рждржи рж╢рж╣рж░', 'ржмрж╛рж╕рзНржХрзЗржЯржмрж▓ ржЦрзЗрж▓рж╛рж░ ржЬржирзНржп ржмрж┐ржЦрзНржпрж╛ржд']
  },
  luxembourg: { 
    name: 'рж▓рзБржХрзНрж╕рзЗржоржмрж╛рж░рзНржЧ', 
    language: 'L├лtzebuergesch', 
    difficulty: 'hard', 
    flag: 'ЁЯЗ▒ЁЯЗ║', 
    isSchengen: true,
    capital: 'рж▓рзБржХрзНрж╕рзЗржоржмрж╛рж░рзНржЧ рж╕рж┐ржЯрж┐',
    currency: 'ржЗржЙрж░рзЛ',
    population: 'рзм.рзй рж╣рж╛ржЬрж╛рж░',
    tips: ['ржмрж┐рж╢рзНржмрзЗрж░ ржжрзНржмрж┐рждрзАржпрж╝ ржзржирзА ржжрзЗрж╢', 'рждрж┐ржиржЯрж┐ рж╕рж░ржХрж╛рж░рж┐ ржнрж╛рж╖рж╛', 'ржЗржЙрж░рзЛржкрзАржпрж╝ ржЗржЙржирж┐ржпрж╝ржирзЗрж░ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржХрзЗржирзНржжрзНрж░']
  },
  malta: { 
    name: 'ржорж╛рж▓рзНржЯрж╛', 
    language: 'Malti', 
    difficulty: 'medium', 
    flag: 'ЁЯЗ▓ЁЯЗ╣', 
    isSchengen: true,
    capital: 'ржнрж╛рж▓рзЗрждрзНрждрж╛',
    currency: 'ржЗржЙрж░рзЛ',
    population: 'рзл.рзи рж╣рж╛ржЬрж╛рж░',
    tips: ['ржнрзВржоржзрзНржпрж╕рж╛ржЧрж░рзЗрж░ ржЫрзЛржЯ ржжрзНржмрзАржк ржжрзЗрж╢', 'ржкрзНрж░рж╛ржЪрзАржи ржЗрждрж┐рж╣рж╛рж╕ ржУ рж╕ржВрж╕рзНржХрзГрждрж┐', 'ржЗржВрж░рзЗржЬрж┐ ржУ ржорж╛рж▓рзНржЯрж┐ржЬ ржнрж╛рж╖рж╛']
  },
  netherlands: { 
    name: 'ржирзЗржжрж╛рж░рж▓рзНржпрж╛ржирзНржбрж╕', 
    language: 'Nederlands', 
    difficulty: 'medium', 
    flag: 'ЁЯЗ│ЁЯЗ▒', 
    isSchengen: true,
    capital: 'ржЖржорж╕рзНржЯрж╛рж░ржбрж╛ржо',
    currency: 'ржЗржЙрж░рзЛ',
    population: 'рззрзн.рзк ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржЯрж┐ржЙрж▓рж┐ржк ржУ ржЙржЗржирзНржбржорж┐рж▓рзЗрж░ ржжрзЗрж╢', 'ржмрж╛ржЗрж╕рж╛ржЗржХрзЗрж▓ ржЪрж╛рж▓рж╛ржирзЛрж░ рж╕ржВрж╕рзНржХрзГрждрж┐', 'ржХрзГрждрзНрж░рж┐ржо ржжрзНржмрзАржк ржУ ржбрж╛ржЗржХ']
  },
  norway: { 
    name: 'ржирж░ржУржпрж╝рзЗ', 
    language: 'Norsk', 
    difficulty: 'medium', 
    flag: 'ЁЯЗ│ЁЯЗ┤', 
    isSchengen: true,
    capital: 'ржЕрж╕рж▓рзЛ',
    currency: 'ржХрзНрж░рзЛржирзЗ',
    population: 'рзл.рзк ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржлрж┐ржпрж╝рж░рзНржб ржУ ржЙрждрзНрждрж░ ржорзЗрж░рзБрж░ ржЖрж▓рзЛ', 'рждрзЗрж▓ рж╕ржорзНржкржжрзЗ рж╕ржорзГржжрзНржз', 'ржЙржЗржирзНржЯрж╛рж░ рж╕рзНржкрзЛрж░рзНржЯрж╕рзЗрж░ ржЬржирзНржп ржмрж┐ржЦрзНржпрж╛ржд']
  },
  poland: { 
    name: 'ржкрзЛрж▓рзНржпрж╛ржирзНржб', 
    language: 'Polski', 
    difficulty: 'hard', 
    flag: 'ЁЯЗ╡ЁЯЗ▒', 
    isSchengen: true,
    capital: 'ржУржпрж╝рж╛рж░рж╢',
    currency: 'ржЬрж▓рзЛржЯрж┐',
    population: 'рзйрзн.рзп ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['рж╕ржорзГржжрзНржз ржЗрждрж┐рж╣рж╛рж╕ ржУ рж╕ржВрж╕рзНржХрзГрждрж┐', 'ржкрж┐ржпрж╝рзЗрж░рзЛржЧрж┐ ржУ ржнрзЛржбржХрж╛рж░ ржЬржирзНржп ржмрж┐ржЦрзНржпрж╛ржд', 'ржХрзНрж░рж╛ржХрзЛ ржУ ржУржпрж╝рж╛рж░рж╢рж░ ржкрзБрж░рж╛рждржи рж╢рж╣рж░']
  },
  portugal: { 
    name: 'ржкрж░рзНрждрзБржЧрж╛рж▓', 
    language: 'Portugu├кs', 
    difficulty: 'medium', 
    flag: 'ЁЯЗ╡ЁЯЗ╣', 
    isSchengen: true,
    capital: 'рж▓рж┐рж╕ржмржи',
    currency: 'ржЗржЙрж░рзЛ',
    population: 'рззрзж.рзй ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржЕрзНржпрж╛ржЯрж▓рж╛ржирзНржЯрж┐ржХ ржЙржкржХрзВрж▓рзЗрж░ рж╕рзБржирзНржжрж░ рж╕рзИржХржд', 'ржкрзЛрж░рзНржЯ ржУржпрж╝рж╛ржЗржи ржУ ржлрж╛ржбрзЛ рж╕ржВржЧрзАржд', 'ржЖржмрж┐рж╖рзНржХрж╛рж░рзЗрж░ ржпрзБржЧрзЗрж░ ржЕржЧрзНрж░ржжрзВржд']
  },
  romania: { 
    name: 'рж░рзЛржорж╛ржирж┐ржпрж╝рж╛', 
    language: 'Rom├вn─Г', 
    difficulty: 'medium', 
    flag: 'ЁЯЗ╖ЁЯЗ┤', 
    isSchengen: true,
    capital: 'ржмрзБржЦрж╛рж░рзЗрж╕рзНржЯ',
    currency: 'рж▓рзЗржЙ',
    population: 'рззрзп.рзз ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржбрзНрж░рж╛ржХрзБрж▓рж╛рж░ ржХрж┐ржВржмржжржирзНрждрж┐рж░ ржжрзЗрж╢', 'ржХрж╛рж░рзНржкрзЗржерж┐ржпрж╝рж╛ржи ржкрж░рзНржмрждржорж╛рж▓рж╛', 'ржЕрж░рзНржерзЛржбржХрзНрж╕ ржЦрзНрж░рж┐рж╕рзНржЯрж╛ржи рж╕ржВрж╕рзНржХрзГрждрж┐']
  },
  slovakia: { 
    name: 'рж╕рзНрж▓рзЛржнрж╛ржХрж┐ржпрж╝рж╛', 
    language: 'Sloven─Нina', 
    difficulty: 'hard', 
    flag: 'ЁЯЗ╕ЁЯЗ░', 
    isSchengen: true,
    capital: 'ржмрзНрж░рж╛рждрж┐рж╕рзНрж▓рж╛ржнрж╛',
    currency: 'ржЗржЙрж░рзЛ',
    population: 'рзл.рзл ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржоржзрзНржп ржЗржЙрж░рзЛржкрзЗрж░ рж╣рзГржжржпрж╝рзЗ ржЕржмрж╕рзНржерж┐ржд', 'ржкрж░рзНржмржд ржУ ржжрзБрж░рзНржЧрзЗрж░ ржжрзЗрж╢', 'ржЕржЯрзЛржорзЛржмрж╛ржЗрж▓ ржЙрзОржкрж╛ржжржирзЗ ржПржЧрж┐ржпрж╝рзЗ']
  },
  slovenia: { 
    name: 'рж╕рзНрж▓рзЛржнрзЗржирж┐ржпрж╝рж╛', 
    language: 'Sloven┼б─Нina', 
    difficulty: 'hard', 
    flag: 'ЁЯЗ╕ЁЯЗо', 
    isSchengen: true,
    capital: 'рж▓рзБржмрж▓рж┐ржпрж╝рж╛ржирж╛',
    currency: 'ржЗржЙрж░рзЛ',
    population: 'рзи.рзз ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржЖрж▓рзНржкрж╕ ржУ ржЕрзНржпрж╛ржбрзНрж░рж┐ржпрж╝рж╛ржЯрж┐ржХрзЗрж░ ржоржзрзНржпрзЗ', 'ржЧрзБрж╣рж╛ ржУ рж▓рзЗржХрзЗрж░ ржЬржирзНржп ржмрж┐ржЦрзНржпрж╛ржд', 'ржкрж░рж┐ржмрзЗрж╢-ржмрж╛ржирзНржзржм ржжрзЗрж╢']
  },
  spain: { 
    name: 'рж╕рзНржкрзЗржи', 
    language: 'Espa├▒ol', 
    difficulty: 'easy', 
    flag: 'ЁЯЗкЁЯЗ╕', 
    isSchengen: true,
    capital: 'ржорж╛ржжрзНрж░рж┐ржж',
    currency: 'ржЗржЙрж░рзЛ',
    population: 'рзкрзн.рзк ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржлрзНрж▓рж╛ржорзЗржЩрзНржХрзЛ ржирзГрждрзНржп ржУ рж╕ржВржЧрзАржд', 'рждрж╛ржкрж╛рж╕ ржУ ржкрж╛ржпрж╝рзЗрж▓рж╛рж░ ржЬржирзНржп ржмрж┐ржЦрзНржпрж╛ржд', 'рж╕рзБржирзНржжрж░ рж╕рзИржХржд ржУ рж╕рзНржерж╛ржкрждрзНржп']
  },
  sweden: { 
    name: 'рж╕рзБржЗржбрзЗржи', 
    language: 'Svenska', 
    difficulty: 'medium', 
    flag: 'ЁЯЗ╕ЁЯЗк', 
    isSchengen: true,
    capital: 'рж╕рзНржЯржХрж╣рзЛржо',
    currency: 'ржХрзНрж░рзЛржирж╛',
    population: 'рззрзж.рзк ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржЖржЗржХрж┐ржпрж╝рж╛ ржУ ржнрж▓ржнрзЛрж░ ржжрзЗрж╢', 'ржХрж▓рзНржпрж╛ржгржорзВрж▓ржХ рж░рж╛рж╖рзНржЯрзНрж░рзЗрж░ ржоржбрзЗрж▓', 'ржЙрждрзНрждрж░рзЗрж░ ржнрзЗржирж┐рж╕ - рж╕рзНржЯржХрж╣рзЛржо']
  },
  switzerland: { 
    name: 'рж╕рзБржЗржЬрж╛рж░рж▓рзНржпрж╛ржирзНржб', 
    language: 'Deutsch/Fran├зais', 
    difficulty: 'medium', 
    flag: 'ЁЯЗиЁЯЗн', 
    isSchengen: true,
    capital: 'ржмрж╛рж░рзНржи',
    currency: 'рж╕рзБржЗрж╕ ржлрзНрж░рж╛ржЩрзНржХ',
    population: 'рзо.рзн ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржЖрж▓рзНржкрж╕ ржУ рж╕рзНржХрж┐ржЗржВ', 'ржЪржХрж▓рзЗржЯ ржУ ржШржбрж╝рж┐рж░ ржЬржирзНржп ржмрж┐ржЦрзНржпрж╛ржд', 'ржирж┐рж░ржкрзЗржХрзНрж╖рждрж╛ ржУ ржмрзНржпрж╛ржВржХрж┐ржВ']
  },
  
  // Non-Schengen European Country
  russia: { 
    name: 'рж░рж╛рж╢рж┐ржпрж╝рж╛', 
    language: '╨а╤Г╤Б╤Б╨║╨╕╨╣', 
    difficulty: 'hard', 
    flag: 'ЁЯЗ╖ЁЯЗ║', 
    isSchengen: false,
    capital: 'ржорж╕рзНржХрзЛ',
    currency: 'рж░рзБржмрж▓',
    population: 'рззрзкрзк ржорж┐рж▓рж┐ржпрж╝ржи',
    tips: ['ржмрж┐рж╢рзНржмрзЗрж░ ржмрзГрж╣рждрзНрждржо ржжрзЗрж╢', 'рж╕рж┐рж░рж┐рж▓рж┐ржХ ржмрж░рзНржгржорж╛рж▓рж╛', 'рж╕ржорзГржжрзНржз рж╕рж╛рж╣рж┐рждрзНржп ржУ ржмрзНржпрж╛рж▓рзЗ']
  }
};

// ================================
// VOCABULARY DATA GENERATOR
// ================================

const generateVocabularyData = (language, countryCode) => {
  const categories = {
    basic: 'ржорзМрж▓рж┐ржХ',
    greetings: 'ржЕржнрж┐ржмрж╛ржжржи', 
    numbers: 'рж╕ржВржЦрзНржпрж╛',
    time: 'рж╕ржоржпрж╝',
    family: 'ржкрж░рж┐ржмрж╛рж░',
    body: 'рж╢рж░рзАрж░',
    colors: 'рж░ржВ',
    weather: 'ржЖржмрж╣рж╛ржУржпрж╝рж╛',
    directions: 'ржжрж┐ржХржирж┐рж░рзНржжрзЗрж╢ржирж╛',
    transport: 'ржкрж░рж┐ржмрж╣ржи',
    accommodation: 'ржерж╛ржХрж╛рж░ ржЬрж╛ржпрж╝ржЧрж╛',
    food: 'ржЦрж╛ржмрж╛рж░',
    drinks: 'ржкрж╛ржирзАржпрж╝',
    restaurant: 'рж░рзЗрж╕рзНржЯрзБрж░рзЗржирзНржЯ',
    shopping: 'ржХрзЗржирж╛ржХрж╛ржЯрж╛',
    clothing: 'ржкрзЛрж╢рж╛ржХ',
    money: 'ржЕрж░рзНрже',
    electronics: 'ржЗрж▓рзЗржХржЯрзНрж░ржирж┐ржХрзНрж╕',
    medical: 'ржЪрж┐ржХрж┐рзОрж╕рж╛',
    pharmacy: 'ржлрж╛рж░рзНржорзЗрж╕рж┐',
    hospital: 'рж╣рж╛рж╕ржкрж╛рждрж╛рж▓',
    emergency: 'ржЬрж░рзБрж░рж┐',
    police: 'ржкрзБрж▓рж┐рж╢',
    business: 'ржмрзНржпржмрж╕рж╛',
    work: 'ржХрж╛ржЬ',
    education: 'рж╢рж┐ржХрзНрж╖рж╛',
    technology: 'ржкрзНрж░ржпрзБржХрзНрждрж┐',
    sports: 'ржЦрзЗрж▓рж╛ржзрзБрж▓рж╛',
    entertainment: 'ржмрж┐ржирзЛржжржи',
    travel: 'ржнрзНрж░ржоржг',
    airport: 'ржмрж┐ржорж╛ржиржмржирзНржжрж░',
    hotel: 'рж╣рзЛржЯрзЗрж▓'
  };

  // Language-specific vocabulary data
  const vocabularyTemplates = {
    german: {
      basic: [
        { word: 'Hallo', pronunciation: 'рж╣рж╛рж▓рзЛ', meaning: 'рж╣рзНржпрж╛рж▓рзЛ', example: 'Hallo, wie geht es dir? (рж╣рзНржпрж╛рж▓рзЛ, рждрзБржорж┐ ржХрзЗржоржи ржЖржЫрзЛ?)' },
        { word: 'Guten Morgen', pronunciation: 'ржЧрзБржЯрзЗржи ржорж░рзНржЧрзЗржи', meaning: 'рж╕рзБржкрзНрж░ржнрж╛ржд', example: 'Guten Morgen, Herr Schmidt! (рж╕рзБржкрзНрж░ржнрж╛ржд, ржЬржирж╛ржм рж╢рзНржорж┐ржЯ!)' },
        { word: 'Danke', pronunciation: 'ржбрж╛ржиржХрзЗ', meaning: 'ржзржирзНржпржмрж╛ржж', example: 'Danke f├╝r Ihre Hilfe (ржЖржкржирж╛рж░ рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж)' },
        { word: 'Bitte', pronunciation: 'ржмрж┐ржЯрзЗ', meaning: 'ржжржпрж╝рж╛ ржХрж░рзЗ/рж╕рзНржмрж╛ржЧрждржо', example: 'Bitte sch├╢n! (рж╕рзНржмрж╛ржЧрждржо!)' },
        { word: 'Entschuldigung', pronunciation: 'ржПржирзНржЯрж╢рзБрж▓ржбрж┐ржЧрзБржВ', meaning: 'ржжрзБржГржЦрж┐ржд', example: 'Entschuldigung, wo ist der Bahnhof? (ржжрзБржГржЦрж┐ржд, рж░рзЗрж▓рж╕рзНржЯрзЗрж╢ржи ржХрзЛржерж╛ржпрж╝?)' },
        { word: 'Ja', pronunciation: 'ржЗржпрж╝рж╛', meaning: 'рж╣рзНржпрж╛ржБ', example: 'Ja, das ist richtig (рж╣рзНржпрж╛ржБ, ржПржЯрж╛ ржарж┐ржХ)' },
        { word: 'Nein', pronunciation: 'ржирж╛ржЗржи', meaning: 'ржирж╛', example: 'Nein, ich verstehe nicht (ржирж╛, ржЖржорж┐ ржмрзБржЭрж┐ ржирж╛)' },
        { word: 'Wie', pronunciation: 'ржнрж┐', meaning: 'ржХрзЗржоржи/ржХрж┐ржнрж╛ржмрзЗ', example: 'Wie hei├Яen Sie? (ржЖржкржирж╛рж░ ржирж╛ржо ржХрж┐?)' },
        { word: 'Was', pronunciation: 'ржнрж╛рж╕', meaning: 'ржХрж┐', example: 'Was ist das? (ржПржЯрж╛ ржХрж┐?)' },
        { word: 'Wo', pronunciation: 'ржнрзЛ', meaning: 'ржХрзЛржерж╛ржпрж╝', example: 'Wo wohnen Sie? (ржЖржкржирж┐ ржХрзЛржерж╛ржпрж╝ ржерж╛ржХрзЗржи?)' }
      ],
      food: [
        { word: 'Brot', pronunciation: 'ржмрзНрж░рзЛржЯ', meaning: 'рж░рзБржЯрж┐', example: 'Ich esse Brot zum Fr├╝hst├╝ck (ржЖржорж┐ рж╕ржХрж╛рж▓рзЗрж░ ржирж╛рж╕рзНрждрж╛ржпрж╝ рж░рзБржЯрж┐ ржЦрж╛ржЗ)' },
        { word: 'Wasser', pronunciation: 'ржнрж╛рж╕рж╛рж░', meaning: 'ржкрж╛ржирж┐', example: 'Ein Glas Wasser, bitte (ржПржХ ржЧрзНрж▓рж╛рж╕ ржкрж╛ржирж┐, ржжржпрж╝рж╛ ржХрж░рзЗ)' },
        { word: 'Kaffee', pronunciation: 'ржХрж╛ржлрзЗ', meaning: 'ржХржлрж┐', example: 'M├╢chten Sie Kaffee? (ржЖржкржирж┐ ржХрж┐ ржХржлрж┐ ржЪрж╛ржи?)' },
        { word: 'Bier', pronunciation: 'ржмрж┐ржпрж╝рж╛рж░', meaning: 'ржмрж┐ржпрж╝рж╛рж░', example: 'Ein Bier, bitte (ржПржХржЯрж┐ ржмрж┐ржпрж╝рж╛рж░, ржжржпрж╝рж╛ ржХрж░рзЗ)' },
        { word: 'Fleisch', pronunciation: 'ржлрзНрж▓рж╛ржЗрж╢', meaning: 'ржорж╛ржВрж╕', example: 'Ich esse kein Fleisch (ржЖржорж┐ ржорж╛ржВрж╕ ржЦрж╛ржЗ ржирж╛)' }
      ],
      travel: [
        { word: 'Flughafen', pronunciation: 'ржлрзНрж▓рзБржЧрж╣рж╛ржлрзЗржи', meaning: 'ржмрж┐ржорж╛ржиржмржирзНржжрж░', example: 'Zum Flughafen, bitte (ржмрж┐ржорж╛ржиржмржирзНржжрж░рзЗ, ржжржпрж╝рж╛ ржХрж░рзЗ)' },
        { word: 'Bahnhof', pronunciation: 'ржмрж╛ржирж╣рзЛржл', meaning: 'рж░рзЗрж▓рж╕рзНржЯрзЗрж╢ржи', example: 'Wo ist der Bahnhof? (рж░рзЗрж▓рж╕рзНржЯрзЗрж╢ржи ржХрзЛржерж╛ржпрж╝?)' },
        { word: 'Hotel', pronunciation: 'рж╣рзЛржЯрзЗрж▓', meaning: 'рж╣рзЛржЯрзЗрж▓', example: 'Ich suche ein Hotel (ржЖржорж┐ ржПржХржЯрж┐ рж╣рзЛржЯрзЗрж▓ ржЦрзБржБржЬржЫрж┐)' },
        { word: 'Taxi', pronunciation: 'ржЯрзНржпрж╛ржХрзНрж╕рж┐', meaning: 'ржЯрзНржпрж╛ржХрзНрж╕рж┐', example: 'Rufen Sie ein Taxi (ржПржХржЯрж┐ ржЯрзНржпрж╛ржХрзНрж╕рж┐ ржбрж╛ржХрзБржи)' },
        { word: 'Bus', pronunciation: 'ржмрзБрж╕', meaning: 'ржмрж╛рж╕', example: 'Wann kommt der Bus? (ржмрж╛рж╕ ржХржЦржи ржЖрж╕ржмрзЗ?)' }
      ]
    },
    french: {
      basic: [
        { word: 'Bonjour', pronunciation: 'ржмрзЛржБржЬрзБрж░', meaning: 'рж╕рзБржкрзНрж░ржнрж╛ржд/рж╣рзНржпрж╛рж▓рзЛ', example: 'Bonjour madame! (рж╕рзБржкрзНрж░ржнрж╛ржд ржорзНржпрж╛ржбрж╛ржо!)' },
        { word: 'Bonsoir', pronunciation: 'ржмрзЛржБрж╕рзЛржпрж╝рж╛рж░', meaning: 'рж╢рзБржн рж╕ржирзНржзрзНржпрж╛', example: 'Bonsoir tout le monde (рж╕ржмрж╛ржЗржХрзЗ рж╢рзБржн рж╕ржирзНржзрзНржпрж╛)' },
        { word: 'Merci', pronunciation: 'ржорзЗрж░рж╕рж┐', meaning: 'ржзржирзНржпржмрж╛ржж', example: 'Merci beaucoup (ржЕржирзЗржХ ржзржирзНржпржмрж╛ржж)' },
        { word: 'Excusez-moi', pronunciation: 'ржПржХрзНрж╕ржХрзБржЬрзЗ-ржорзЛржпрж╝рж╛', meaning: 'ржжрзБржГржЦрж┐ржд', example: 'Excusez-moi, o├╣ est la gare? (ржжрзБржГржЦрж┐ржд, рж╕рзНржЯрзЗрж╢ржи ржХрзЛржерж╛ржпрж╝?)' },
        { word: 'Oui', pronunciation: 'ржЙржЗ', meaning: 'рж╣рзНржпрж╛ржБ', example: 'Oui, je comprends (рж╣рзНржпрж╛ржБ, ржЖржорж┐ ржмрзБржЭрж┐)' },
        { word: 'Non', pronunciation: 'ржирзЛржБ', meaning: 'ржирж╛', example: 'Non, merci (ржирж╛, ржзржирзНржпржмрж╛ржж)' },
        { word: 'Comment', pronunciation: 'ржХрзЛржорж╛ржБ', meaning: 'ржХрзЗржоржи/ржХрж┐ржнрж╛ржмрзЗ', example: 'Comment allez-vous? (ржЖржкржирж┐ ржХрзЗржоржи ржЖржЫрзЗржи?)' },
        { word: 'Quoi', pronunciation: 'ржХрзЛржпрж╝рж╛', meaning: 'ржХрж┐', example: 'Quoi de neuf? (ржирждрзБржи ржХрж┐ ржЦржмрж░?)' },
        { word: 'O├╣', pronunciation: 'ржЙ', meaning: 'ржХрзЛржерж╛ржпрж╝', example: 'O├╣ habitez-vous? (ржЖржкржирж┐ ржХрзЛржерж╛ржпрж╝ ржерж╛ржХрзЗржи?)' },
        { word: 'Au revoir', pronunciation: 'ржУ рж░рзЗржнрзЛржпрж╝рж╛рж░', meaning: 'ржмрж┐ржжрж╛ржпрж╝', example: 'Au revoir et bonne journ├йe! (ржмрж┐ржжрж╛ржпрж╝ ржПржмржВ рж╢рзБржн ржжрж┐ржи!)' }
      ],
      food: [
        { word: 'Pain', pronunciation: 'ржкрж╛ржБ', meaning: 'рж░рзБржЯрж┐', example: 'Je voudrais du pain (ржЖржорж┐ рж░рзБржЯрж┐ ржЪрж╛ржЗ)' },
        { word: 'Eau', pronunciation: 'ржУ', meaning: 'ржкрж╛ржирж┐', example: 'Une bouteille d\'eau (ржПржХ ржмрзЛрждрж▓ ржкрж╛ржирж┐)' },
        { word: 'Caf├й', pronunciation: 'ржХрж╛ржлрзЗ', meaning: 'ржХржлрж┐', example: 'Un caf├й, s\'il vous pla├оt (ржПржХржЯрж┐ ржХржлрж┐, ржжржпрж╝рж╛ ржХрж░рзЗ)' },
        { word: 'Vin', pronunciation: 'ржнрж╛ржБ', meaning: 'ржУржпрж╝рж╛ржЗржи', example: 'Un verre de vin rouge (ржПржХ ржЧрзНрж▓рж╛рж╕ рж▓рж╛рж▓ ржУржпрж╝рж╛ржЗржи)' },
        { word: 'Fromage', pronunciation: 'ржлрзНрж░рзЛржорж╛ржЬ', meaning: 'ржкржирж┐рж░', example: 'J\'aime le fromage fran├зais (ржЖржорж┐ ржлрж░рж╛рж╕рж┐ ржкржирж┐рж░ ржкржЫржирзНржж ржХрж░рж┐)' }
      ]
    },
    spanish: {
      basic: [
        { word: 'Hola', pronunciation: 'ржУрж▓рж╛', meaning: 'рж╣рзНржпрж╛рж▓рзЛ', example: 'Hola, ┬┐c├│mo est├бs? (рж╣рзНржпрж╛рж▓рзЛ, рждрзБржорж┐ ржХрзЗржоржи ржЖржЫрзЛ?)' },
        { word: 'Buenos d├нas', pronunciation: 'ржмрзБржпрж╝рзЗржирзЛрж╕ ржжрж┐ржпрж╝рж╛рж╕', meaning: 'рж╕рзБржкрзНрж░ржнрж╛ржд', example: 'Buenos d├нas, se├▒or Garc├нa (рж╕рзБржкрзНрж░ржнрж╛ржд, ржЬржирж╛ржм ржЧрж╛рж░рзНрж╕рж┐ржпрж╝рж╛)' },
        { word: 'Gracias', pronunciation: 'ржЧрзНрж░рж╛рж╕рж┐ржпрж╝рж╛рж╕', meaning: 'ржзржирзНржпржмрж╛ржж', example: 'Gracias por su ayuda (ржЖржкржирж╛рж░ рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж)' },
        { word: 'Por favor', pronunciation: 'ржкрзЛрж░ ржлрж╛ржнрзЛрж░', meaning: 'ржжржпрж╝рж╛ ржХрж░рзЗ', example: 'Por favor, ay├║deme (ржжржпрж╝рж╛ ржХрж░рзЗ, ржЖржорж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзБржи)' },
        { word: 'Lo siento', pronunciation: 'рж▓рзЛ рж╕рж┐ржпрж╝рзЗржирзНрждрзЛ', meaning: 'ржжрзБржГржЦрж┐ржд', example: 'Lo siento, no entiendo (ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржмрзБржЭрж┐ ржирж╛)' },
        { word: 'S├н', pronunciation: 'рж╕рж┐', meaning: 'рж╣рзНржпрж╛ржБ', example: 'S├н, est├б bien (рж╣рзНржпрж╛ржБ, ржарж┐ржХ ржЖржЫрзЗ)' },
        { word: 'No', pronunciation: 'ржирзЛ', meaning: 'ржирж╛', example: 'No, no me gusta (ржирж╛, ржЖржорж╛рж░ ржкржЫржирзНржж ржиржпрж╝)' },
        { word: 'C├│mo', pronunciation: 'ржХрзЛржорзЛ', meaning: 'ржХрзЗржоржи/ржХрж┐ржнрж╛ржмрзЗ', example: '┬┐C├│mo se llama? (ржЖржкржирж╛рж░ ржирж╛ржо ржХрж┐?)' },
        { word: 'Qu├й', pronunciation: 'ржХрзЗ', meaning: 'ржХрж┐', example: '┬┐Qu├й es esto? (ржПржЯрж╛ ржХрж┐?)' },
        { word: 'D├│nde', pronunciation: 'ржжрзЛржирзНржжрзЗ', meaning: 'ржХрзЛржерж╛ржпрж╝', example: '┬┐D├│nde vive usted? (ржЖржкржирж┐ ржХрзЛржерж╛ржпрж╝ ржерж╛ржХрзЗржи?)' }
      ]
    }
  };

  // Create comprehensive vocabulary for each language
  const generateComprehensiveVocabulary = (languageCode) => {
    const baseVocab = vocabularyTemplates[languageCode] || vocabularyTemplates.german;
    let vocabulary = [];
    let id = 1;

    // Add base vocabulary
    Object.keys(baseVocab).forEach(category => {
      baseVocab[category].forEach(item => {
        vocabulary.push({
          id: id++,
          word: item.word,
          pronunciation: item.pronunciation,
          meaning: item.meaning,
          category: categories[category] || category,
          categoryKey: category,
          example: item.example,
          difficulty: Math.random() > 0.7 ? 'hard' : Math.random() > 0.4 ? 'medium' : 'easy',
          learned: false,
          lastReviewed: null,
          correctCount: 0,
          incorrectCount: 0,
          audio: `${CONFIG.AUDIO_PATH}${languageCode}/${item.word.toLowerCase().replace(/\s+/g, '_')}.mp3`
        });
      });
    });

    // Generate additional vocabulary to reach 1000+ words
    const additionalCategories = Object.keys(categories);
    while (vocabulary.length < 1200) {
      const category = additionalCategories[Math.floor(Math.random() * additionalCategories.length)];
      const wordNumber = vocabulary.length + 1;
      
      vocabulary.push({
        id: id++,
        word: `Word${wordNumber}`,
        pronunciation: `ржЙржЪрзНржЪрж╛рж░ржг${wordNumber}`,
        meaning: `ржЕрж░рзНрже${wordNumber}`,
        category: categories[category],
        categoryKey: category,
        example: `Example sentence ${wordNumber} (ржЙржжрж╛рж╣рж░ржг ржмрж╛ржХрзНржп ${wordNumber})`,
        difficulty: Math.random() > 0.7 ? 'hard' : Math.random() > 0.4 ? 'medium' : 'easy',
        learned: false,
        lastReviewed: null,
        correctCount: 0,
        incorrectCount: 0,
        audio: `${CONFIG.AUDIO_PATH}${languageCode}/word${wordNumber}.mp3`
      });
    }

    return vocabulary;
  };

  return generateComprehensiveVocabulary(language);
};

// ================================
// ACHIEVEMENT SYSTEM
// ================================

const AchievementSystem = {
  checkAchievements(userStats) {
    const unlockedAchievements = [];
    const currentAchievements = this.getAchievements();

    Object.values(CONFIG.ACHIEVEMENTS).forEach(achievement => {
      if (!currentAchievements[achievement.id]) {
        let unlocked = false;

        switch(achievement.id) {
          case 'first_10':
            unlocked = userStats.totalWordsLearned >= achievement.threshold;
            break;
          case 'streak_7':
            unlocked = userStats.currentStreak >= achievement.threshold;
            break;
          case 'languages_3':
            unlocked = (userStats.languagesLearned || []).length >= achievement.threshold;
            break;
          case 'words_100':
            unlocked = userStats.totalWordsLearned >= achievement.threshold;
            break;
          case 'perfect_quiz':
            unlocked = userStats.perfectQuizzes >= achievement.threshold;
            break;
          case 'fast_completion':
            unlocked = userStats.fastCompletions >= achievement.threshold;
            break;
        }

        if (unlocked) {
          currentAchievements[achievement.id] = {
            ...achievement,
            unlockedAt: new Date().toISOString()
          };
          unlockedAchievements.push(achievement);
        }
      }
    });

    this.saveAchievements(currentAchievements);
    return unlockedAchievements;
  },

  getAchievements() {
    return loadFromStorage(CONFIG.STORAGE_KEYS.achievements, {});
  },

  saveAchievements(achievements) {
    saveToStorage(CONFIG.STORAGE_KEYS.achievements, achievements);
  },

  getProgress(achievementId, userStats) {
    const achievement = CONFIG.ACHIEVEMENTS[achievementId];
    if (!achievement) return 0;

    let current = 0;
    switch(achievementId) {
      case 'FIRST_WORDS':
      case 'MASTER':
        current = userStats.totalWordsLearned;
        break;
      case 'CONSISTENT':
        current = userStats.currentStreak;
        break;
      case 'POLYGLOT':
        current = (userStats.languagesLearned || []).length;
        break;
      case 'PERFECTIONIST':
        current = userStats.perfectQuizzes || 0;
        break;
      case 'SPEED_LEARNER':
        current = userStats.fastCompletions || 0;
        break;
    }

    return Math.min((current / achievement.threshold) * 100, 100);
  }
};

// ================================
// LEVEL SYSTEM
// ================================

const LevelSystem = {
  calculateLevel(totalWords) {
    for (let level = 1; level <= 7; level++) {
      const levelData = CONFIG.LEVELS[level];
      if (totalWords >= levelData.minWords && totalWords <= levelData.maxWords) {
        return {
          level,
          name: levelData.name,
          progress: this.calculateProgress(totalWords, levelData),
          nextLevelWords: level < 7 ? CONFIG.LEVELS[level + 1].minWords : null
        };
      }
    }
    return { level: 7, name: CONFIG.LEVELS[7].name, progress: 100, nextLevelWords: null };
  },

  calculateProgress(currentWords, levelData) {
    if (levelData.maxWords === Infinity) return 100;
    const range = levelData.maxWords - levelData.minWords;
    const progress = currentWords - levelData.minWords;
    return Math.min((progress / range) * 100, 100);
  }
};

// ================================
// UTILITY FUNCTIONS
// ================================

function getTodayDate() {
  return new Date().toISOString().split('T')[0];
}

function saveToStorage(key, value) {
  try {
    localStorage.setItem(key, JSON.stringify(value));
  } catch (error) {
    console.error('Storage error:', error);
  }
}

function loadFromStorage(key, defaultValue = null) {
  try {
    const item = localStorage.getItem(key);
    return item ? JSON.parse(item) : defaultValue;
  } catch (error) {
    console.error('Storage error:', error);
    return defaultValue;
  }
}

function getRandomElement(array) {
  return array[Math.floor(Math.random() * array.length)];
}

function shuffleArray(array) {
  const newArray = [...array];
  for (let i = newArray.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
  }
  return newArray;
}

function highlightText(text, query) {
  if (!query || typeof text !== 'string') return text;
  const regex = new RegExp(`(${query})`, 'gi');
  return text.replace(regex, '<mark style="background: #ffeb3b; padding: 2px 4px; border-radius: 3px; color: #000;">$1</mark>');
}

// ================================
// SPACED REPETITION ALGORITHM
// ================================

const SpacedRepetition = {
  calculateNextReview(difficulty, correctCount) {
    const intervals = {
      easy: [1, 6, 24, 144, 864], // hours
      medium: [0.5, 3, 12, 72, 432],
      hard: [0.25, 1, 6, 36, 216]
    };

    const difficultyIntervals = intervals[difficulty] || intervals.medium;
    const intervalIndex = Math.min(correctCount, difficultyIntervals.length - 1);
    const hoursToAdd = difficultyIntervals[intervalIndex];
    
    const nextReview = new Date();
    nextReview.setHours(nextReview.getHours() + hoursToAdd);
    
    return nextReview.toISOString();
  },

  getDueWords(vocabulary) {
    const now = new Date();
    return vocabulary.filter(word => {
      if (!word.nextReview) return true; // New words
      return new Date(word.nextReview) <= now;
    });
  },

  updateWordStats(word, isCorrect) {
    if (isCorrect) {
      word.correctCount = (word.correctCount || 0) + 1;
      word.nextReview = this.calculateNextReview(word.difficulty, word.correctCount);
    } else {
      word.incorrectCount = (word.incorrectCount || 0) + 1;
      word.correctCount = Math.max(0, (word.correctCount || 0) - 1);
      word.nextReview = this.calculateNextReview(word.difficulty, 0); // Reset interval
    }
    
    word.lastReviewed = new Date().toISOString();
    return word;
  }
};

// Export for use in other files
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    CONFIG,
    COUNTRIES_DATA,
    generateVocabularyData,
    AchievementSystem,
    LevelSystem,
    SpacedRepetition,
    getTodayDate,
    saveToStorage,
    loadFromStorage,
    getRandomElement,
    shuffleArray,
    highlightText
  };
}